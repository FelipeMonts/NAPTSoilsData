E(graph.data.frame)
degree(g.River.2, mode="in")
which(degree(g.River.2) == 0)
degree(g.River.2, mode="out")
which(degree(g.River.2, mode="out") == 2)
V(g.River.2)[is.na(Point.ID)]$color='Blue'
V(g.River.2)[!is.na(Point.ID)]$color='Red'
tkplot(g.River.2, canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.1, vertex.label=g.River.2.vertices$Index, vertex.label.cex=1, vertex.label.dist=1)   ;
tkplot(g.River.2, canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5, vertex.label=paste(g.River.2.vertices$Index,round(g.River.2.vertices$Zmax,2),sep="-"), vertex.label.cex=1, vertex.label.dist=1) ;
g.River.sub<-induced.subgraph(g.River.2,seq(1,30)) ;
V(g.River.sub)[is.na(Point.ID)]$color='Blue'
V(g.River.sub)[!is.na(Point.ID)]$color='Red'
tkplot(g.River.sub, canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=1.0,vertex.label=paste(V(g.River.sub)$name,round(V(g.River.sub)$Zmax,2),sep="-"),vertex.label.cex=1, vertex.label.dist=1,margin=0.2) ;
str(g.River.sub)
V(g.River.sub)$name
list.vertex.attributes(g.River.sub)
list.edge.attributes(g.River.sub)
Edgs<-as_data_frame(g.River.2, what=c("edges"));
Vertcs<-as_data_frame(g.River.2, what=c("vertices"))
from.Vertcs<-merge(Edgs, Vertcs, by.x="from", by.y="name", all.x=T ) ;
to.Vertcs<-merge(Edgs, Vertcs, by.x="to", by.y="name", all.x=T ) ;
Edgs.Zmax<-merge(from.Vertcs, to.Vertcs, by="Line.ID") ;
Edgs.Zmax$Elev.Dif<-Edgs.Zmax$Zmax.x-Edgs.Zmax$Zmax.y ;
head(Edgs.Zmax)
g.River.3.edges<-merge(Edgs,Edgs.Zmax, by="Line.ID")[,c("from" , "to" , "Line.ID" , "from.x" , "to.x" , "X.x" , "Y.x" , "Zmax.x" , "Point.ID.x" , "to.y" , "from.y" , "X.y" , "Y.y" , "Zmax.y" , "Point.ID.y" ,"Elev.Dif"  )] ;
names(g.River.3.edges)
g.River.3<-graph.data.frame(g.River.3.edges, vertices=g.River.2.vertices, directed = T) ;
V(g.River.3)[is.na(Point.ID)]$color='Blue'
V(g.River.3)[!is.na(Point.ID)]$color='Red'
tkplot(g.River.3, canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5, vertex.label=g.River.2.vertices$Index, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.edges$Elev.Dif,2), edge.label.cex=1)  ;
tkplot(graph.data.frame(g.River.3.edges[g.River.3.edges$Elev.Dif<0,]),canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5,vertex.label=g.River.2.vertices$Index, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.edges$Elev.Dif,2), edge.label.cex=1)
E(g.River.3)$attr
E(g.River.3)$attr
E(g.River.3)[.]$attr
E(g.River.3)[*]$attr
E(g.River.3)['*']$attr
E(g.River.3)[]$attr
E(g.River.3)[1:3]$attr
g.River.3<-graph.data.frame(g.River.3.edges, vertices=g.River.2.vertices, directed = T) ;
V(g.River.3)[is.na(Point.ID)]$color='Blue'
V(g.River.3)[!is.na(Point.ID)]$color='Red'
E(g.River.3)[1]$attr
edge_attr(g.River.3)
E(g.River.3)[1:5]
edge_attr(g.River.3, 'Elev.Dif')
str(edge_attr(g.River.3, 'Elev.Dif'))
which(E(g.River.3)$Elev.Dif < 0 )
g.River.3.sub<-subgraph.edges(g.River.3,eids=which(E(g.River.3)$Elev.Dif < 0 ));
g.River.3.sub.data<-as_long_data_frame(g.River.3.sub) ;
g.River.3.sub.data
tkplot(g.River.3.sub,canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5, vertex.label=V(g.River.3.sub), vertex.label.cex=1, vertex.label.dist=1, edge.label=E(g.River.3.sub), edge.label.cex=1) ;
tkplot(g.River.3.sub,canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5, vertex.label=V(g.River.3.sub), vertex.label.cex=1, vertex.label.dist=1, edge.label=E(g.River.3.sub), edge.label.cex=1) ;
tkplot(g.River.3.sub,canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, vertex.label.dist=1, edge.label.cex=1) ;
g.River.3.sub.data<-as_long_data_frame(g.River.3.sub) ;
g.River.3.sub.data
round(g.River.3.sub.data$Elev.Dif,2
)
tkplot(g.River.3.sub,canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.label=g.River.3.sub.data$Point.ID.x, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.sub.data$Elev.Dif,3),edge.label.cex=1) ;
adjacent_vertices(g.River.3.sub,mode=c('all'))
V(g.River.3.sub)
g <- make_graph("Zachary")
adjacent_vertices(g, c(1, 34))
which(E(g.River.3)$Elev.Dif < 0 )
adjacent_vertices(g.River.3,which(E(g.River.3)$Elev.Dif < 0 ), mode=c("all") )
subgraph(g.River.3.sub, adjacent_vertices(g.River.3,which(E(g.River.3)$Elev.Dif < 0 ), mode=c("all") ))
adjacent_vertices(g.River.3,which(E(g.River.3)$Elev.Dif < 0 ), mode=c("all") )
V(adjacent_vertices(g.River.3,which(E(g.River.3)$Elev.Dif < 0 ), mode=c("all") ))
str(adjacent_vertices(g.River.3,which(E(g.River.3)$Elev.Dif < 0 ), mode=c("all") ))
as_ids(adjacent_vertices(g.River.3,which(E(g.River.3)$Elev.Dif < 0 ), mode=c("all") ))
unlist(adjacent_vertices(g.River.3,which(E(g.River.3)$Elev.Dif < 0 ), mode=c("all") ))
str(unlist(adjacent_vertices(g.River.3,which(E(g.River.3)$Elev.Dif < 0 ), mode=c("all") )))
unlist(adjacent_vertices(g.River.3,which(E(g.River.3)$Elev.Dif < 0 ), mode=c("all") ), use.names = F)
subgraph(g.River.3,unlist(adjacent_vertices(g.River.3,which(E(g.River.3)$Elev.Dif < 0 ), mode=c("all") ), use.names = F))
induced_subgraph(g.River.3,unlist(adjacent_vertices(g.River.3,which(E(g.River.3)$Elev.Dif < 0 ), mode=c("all") ), use.names = F))
g.River.3.sub.ed<-subgraph.edges(g.River.3,eids=which(E(g.River.3)$Elev.Dif < 0 ));
g.River.3.sub.ed.data<-as_long_data_frame(g.River.3.sub.ed) ;
g.River.3.sub<-induced_subgraph(g.River.3,unlist(adjacent_vertices(g.River.3,which(E(g.River.3)$Elev.Dif < 0 ), mode=c("all") ), use.names = F))
tkplot(g.River.3.sub)
g.River.3.sub-subgraph.edges(g.River.3,eids=which(E(g.River.3)$Elev.Dif < 0 ));
g.River.3.sub.data<-as_long_data_frame(g.River.3.sub) ;
tkplot(g.River.3.sub,canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.label=g.River.3.sub.data$Point.ID.x, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.sub.data$Elev.Dif,3),edge.label.cex=1) ;
g.River.3<-graph.data.frame(g.River.3.edges, vertices=g.River.2.vertices, directed = T) ;
V(g.River.3)[is.na(Point.ID)]$color='Blue'
V(g.River.3)[!is.na(Point.ID)]$color='Red'
edge_attr(g.River.3, 'Elev.Dif'))
tkplot(g.River.3, canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5, vertex.label=g.River.2.vertices$Index, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.edges$Elev.Dif,2), edge.label.cex=1)  ;
tkplot(graph.data.frame(g.River.3.edges[g.River.3.edges$Elev.Dif<0,]),canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5,vertex.label=g.River.2.vertices$Index, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.edges$Elev.Dif,2), edge.label.cex=1)
g.River.3.sub-subgraph.edges(g.River.3,eids=which(E(g.River.3)$Elev.Dif < 0 ));
g.River.3.sub.data<-as_long_data_frame(g.River.3.sub) ;
tkplot(g.River.3.sub,canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.label=g.River.3.sub.data$Point.ID.x, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.sub.data$Elev.Dif,3),edge.label.cex=1) ;
g.River.3.sub-subgraph.edges(g.River.3,eids=which(E(g.River.3)$Elev.Dif < 0 ));
g.River.3.sub.data<-as_long_data_frame(g.River.3.sub) ;
g.River.3.sub.data
.libPaths("C:/Felipe/SotwareANDCoding/R_Library/library")  ;
Project<-"MergeVectorLayer000_q25_a100000" ;
library(devtools)  ;
install.packages("sand") ;
install.packages("sand")
library(sand)
load(paste0('C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_R_Scripts\\MM_PIHM_inputs\\',Project,'\\MM_PHIMInputsR_V2.RData'));
##### Add the river nodes from the  river mesh#########################
library(sp) ;
library(rgdal) ;
MergedRiver.info<-ogrInfo('C:/Aun Trabajo en Proceso/HansYostDeepCreek/Mar0820181045/Stream8000_sln32_dens150m_xln_Decomp.shp');
MergedRiver.info$nrows
MergedRiver<-readOGR('C:/Aun Trabajo en Proceso/HansYostDeepCreek/Mar0820181045/Stream8000_sln32_dens150m_xln_Decomp.shp');
str(MergedRiver, max.level = 2)  ;
sapply(slot(MergedRiver,"lines"), function(x) slot(x,"ID"))
coordinates(MergedRiver)[[1]]
lapply(coordinates(MergedRiver),function(x) x[[1]])
sapply(coordinates(MergedRiver),function(x) x[[1]])
MergedRiver.coords.matrix<-matrix(data=sapply(coordinates(MergedRiver),function(x) x[[1]]), nrow = MergedRiver.info$nrows, ncol = 4, byrow=T) ;
MergedRiver.coords.df<-data.frame(MergedRiver.coords.matrix[,c(1,3)],MergedRiver.coords.matrix[,c(2,4)]);
names(MergedRiver.coords.df)<-c('P1.X', 'P1.Y', 'P2.X', 'P2.Y') ;
MergedRiver.coords.df$Line.ID<-as.character(seq(1:MergedRiver.info$nrows)) ;
MergedRiver.Stacked.Point.coords<-rbind(MergedRiver.coords.matrix[,c(1,3)],MergedRiver.coords.matrix[,c(2,4)])   ;
head(MergedRiver.Stacked.Point.coords) ;
str(MergedRiver.Stacked.Point.coords) ;
MergedRiver.Unique.Point.coords<-data.frame(unique(MergedRiver.Stacked.Point.coords))  ;
names(MergedRiver.Unique.Point.coords)<-c("X" , "Y");
MergedRiver.Unique.Point.coords$Point.ID<-seq(1:dim(MergedRiver.Unique.Point.coords)[1]) ;
head(MergedRiver.Unique.Point.coords) ;
str(MergedRiver.Unique.Point.coords)  ;
MergedRiver.From.points<-merge(MergedRiver.coords.df[,c("P1.X", "P1.Y" ,  "Line.ID")], MergedRiver.Unique.Point.coords, by.x=c('P1.X', 'P1.Y'), by.y=c("X" , "Y"), all.x=T);
head(MergedRiver.From.points) ;
str(MergedRiver.From.points) ;
MergedRiver.To.points<-merge(MergedRiver.coords.df[,c("P2.X", "P2.Y" ,  "Line.ID")], MergedRiver.Unique.Point.coords, by.x=c('P2.X', 'P2.Y'), by.y=c("X" , "Y"), all.x=T);
head(MergedRiver.To.points)
str(MergedRiver.To.points)
MergedRiver.Line.Point<-merge(MergedRiver.From.points,MergedRiver.To.points,by="Line.ID");
head(MergedRiver.Line.Point)
str(MergedRiver.Line.Point)
head(MergedRiver.Unique.Point.coords) ;
str(MergedRiver.Unique.Point.coords);
head(River.Nodes.Elevation) ;
str(River.Nodes.Elevation) ;
Refined.Merged.Nodes<-merge(River.Nodes.Elevation, MergedRiver.Unique.Point.coords, by=c('X', 'Y'),all.x=T) ;
head(Refined.Merged.Nodes)
str(Refined.Merged.Nodes)
summary(Refined.Merged.Nodes)
g.River.2.edges<-MergedRiver.Line.Point[,c("Point.ID.x", "Point.ID.y" , "Line.ID") ] ;
g.River.2.edges<-g.River.2.edges[order(g.River.2.edges$Line.ID),] ;
head(g.River.2.edges,20)
g.River.2.vertices<-Refined.Merged.Nodes[, c('Index', 'X', 'Y','Zmax', 'Point.ID') ] ;
head(g.River.2.vertices)
g.River.2<-graph.data.frame(g.River.2.edges, vertices=g.River.2.vertices, directed = T) ;
str(g.River.2);
plot(g.River.2, layout=layout_nicely,vertex.size= 1, edge.arrow.size=0.1, vertex.label=NA)
tkplot(g.River.2, canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.1, vertex.label=NA)
is.simple(g.River.2)
E(graph.data.frame)
degree(g.River.2, mode="in")
which(degree(g.River.2) == 0)
degree(g.River.2, mode="out")
which(degree(g.River.2, mode="out") == 2)
V(g.River.2)[is.na(Point.ID)]$color='Blue'
V(g.River.2)[!is.na(Point.ID)]$color='Red'
tkplot(g.River.2, canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.1, vertex.label=g.River.2.vertices$Index, vertex.label.cex=1, vertex.label.dist=1)   ;
tkplot(g.River.2, canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5, vertex.label=paste(g.River.2.vertices$Index,round(g.River.2.vertices$Zmax,2),sep="-"), vertex.label.cex=1, vertex.label.dist=1) ;
g.River.sub<-induced.subgraph(g.River.2,seq(1,30)) ;
V(g.River.sub)[is.na(Point.ID)]$color='Blue'
V(g.River.sub)[!is.na(Point.ID)]$color='Red'
tkplot(g.River.sub, canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=1.0,vertex.label=paste(V(g.River.sub)$name,round(V(g.River.sub)$Zmax,2),sep="-"),vertex.label.cex=1, vertex.label.dist=1,margin=0.2) ;
str(g.River.sub)
V(g.River.sub)$name
list.vertex.attributes(g.River.sub)
list.edge.attributes(g.River.sub)
Edgs<-as_data_frame(g.River.2, what=c("edges"));
Vertcs<-as_data_frame(g.River.2, what=c("vertices"))
from.Vertcs<-merge(Edgs, Vertcs, by.x="from", by.y="name", all.x=T ) ;
to.Vertcs<-merge(Edgs, Vertcs, by.x="to", by.y="name", all.x=T ) ;
Edgs.Zmax<-merge(from.Vertcs, to.Vertcs, by="Line.ID") ;
Edgs.Zmax$Elev.Dif<-Edgs.Zmax$Zmax.x-Edgs.Zmax$Zmax.y ;
head(Edgs.Zmax)
g.River.3.edges<-merge(Edgs,Edgs.Zmax, by="Line.ID")[,c("from" , "to" , "Line.ID" , "from.x" , "to.x" , "X.x" , "Y.x" , "Zmax.x" , "Point.ID.x" , "to.y" , "from.y" , "X.y" , "Y.y" , "Zmax.y" , "Point.ID.y" ,"Elev.Dif"  )] ;
names(g.River.3.edges)
g.River.3<-graph.data.frame(g.River.3.edges, vertices=g.River.2.vertices, directed = T) ;
V(g.River.3)[is.na(Point.ID)]$color='Blue'
V(g.River.3)[!is.na(Point.ID)]$color='Red'
edge_attr(g.River.3, 'Elev.Dif'))
tkplot(g.River.3, canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5, vertex.label=g.River.2.vertices$Index, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.edges$Elev.Dif,2), edge.label.cex=1)  ;
tkplot(graph.data.frame(g.River.3.edges[g.River.3.edges$Elev.Dif<0,]),canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5,vertex.label=g.River.2.vertices$Index, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.edges$Elev.Dif,2), edge.label.cex=1)
g.River.3.sub-subgraph.edges(g.River.3,eids=which(E(g.River.3)$Elev.Dif < 0 ));
g.River.3.sub<-subgraph.edges(g.River.3,eids=which(E(g.River.3)$Elev.Dif < 0 ));
g.River.3.sub.data<-as_long_data_frame(g.River.3.sub) ;
g.River.3.sub.data
g.River.3.sub.data<-as_long_data_frame(g.River.3.sub) ;
tkplot(g.River.3.sub,canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.label=g.River.3.sub.data$Point.ID.x, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.sub.data$Elev.Dif,3),edge.label.cex=1) ;
V(g.River.3.sub)
vertex.attributes(g.River.3.sub)
V(g.River.3.sub)$name
tkplot(g.River.3.sub,canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.3.sub)$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.sub.data$Elev.Dif,3),edge.label.cex=1) ;
V(g.River.3.sub)
str(V(g.River.3.sub))
V(g.River.3.sub)$name
make_ego_graph(g.River.3.sub,3,V(g.River.3.sub), mode=c("all"))
g.River.4.sub<-make_ego_graph(g.River.3.sub,3,V(g.River.3.sub), mode=c("all"))
as_long_data_frame(g.River.4.sub)
g.River.4.sub<-make_ego_graph(g.River.3.sub,3,V(g.River.3.sub), mode=c("all"))
as_long_data_frame(g.River.4.sub)
g <- make_ring(10)
g <- connect(g, 2)
tkplot(g)
g <- make_ring(10)
g <- make_ring(10)
tkplot(g)
as_long_data_frame(g.River.4.sub)[1]
as_long_data_frame(g.River.4.sub)[[1]]
as_long_data_frame(g.River.4.sub[[1]])
str(g.River.4.sub)
V(g.River.3.sub)
g.River.4.sub<-make_ego_graph(g.River.3.sub,4,V(g.River.3.sub), mode=c("all"))
as_long_data_frame(g.River.4.sub[[1]])
V(g.River.4.sub[[1]])
g.River.4.sub<-make_ego_graph(g.River.3,4,V(g.River.3.sub), mode=c("all"))
g <- make_ring(10)
as_ids(V(g))
as_ids(E(g))
V(g)$name <- letters[1:10]
as_ids(V(g))
as_ids(E(g))
g.River.4.sub<-make_ego_graph(g.River.3,4,as.ids(V(g.River.3.sub)), mode=c("all"))
g.River.4.sub<-make_ego_graph(g.River.3,4,as_ids(V(g.River.3.sub)), mode=c("all"))
V(g.River.4.sub[[1]])
tkplot(g.River.4.sub[1],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[1]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, vertex.label.dist=1,edge.label.cex=1) ;
g.River.4.sub[1]
tkplot(g.River.4.sub[1])
V(g)$name <- c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j")
make_ego_graph(g, 2, 1:3)
make_ego_graph(g, 2, 1:3)[[1]]
tkplot(make_ego_graph(g, 2, 1:3)[[1]])
g.River.4.sub<-make_ego_graph(g.River.3,4,as_ids(V(g.River.3.sub)), mode=c("all"))
V(g.River.4.sub[[1]])
tkplot(g.River.4.sub[1],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[1]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, vertex.label.dist=1,edge.label.cex=1) ;
tkplot(g.River.4.sub[[1]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[1]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, vertex.label.dist=1,edge.label.cex=1) ;
as_long_data_frame(g.River.4.sub[[1]])
tkplot(g.River.4.sub[[1]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[1]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[1]]$Elev.Dif,3))vertex.label.dist=1,edge.label.cex=1) ;
round(E(g.River.4.sub[[1]])$Elev.Dif,3)
tkplot(g.River.4.sub[[1]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[1]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[1]])$Elev.Dif,3)vertex.label.dist=1,edge.label.cex=1) ;
E(g.River.4.sub[[1]])
E(g.River.4.sub[[1]])$Elev.Dif
E(g.River.4.sub[[1]])$Elev.Dif
round(E(g.River.4.sub[[1]])$Elev.Dif,3)
tkplot(g.River.4.sub[[1]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[1]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[1]])$Elev.Dif,3),vertex.label.dist=1,edge.label.cex=1) ;
g.River.4.sub<-make_ego_graph(g.River.3,3,as_ids(V(g.River.3.sub)), mode=c("all"))
g.River.4.sub<-make_ego_graph(g.River.3,3,as_ids(V(g.River.3.sub)), mode=c("all"))
V(g.River.4.sub[[2]])
as_long_data_frame(g.River.4.sub[[1]])
tkplot(g.River.4.sub[[1]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[1]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[1]])$Elev.Dif,3),vertex.label.dist=1,edge.label.cex=1) ;
tkplot(g.River.4.sub[[2]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[2]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[2]])$Elev.Dif,3),vertex.label.dist=1,edge.label.cex=1) ;
tkplot(g.River.4.sub[[3]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[3]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[3]])$Elev.Dif,3),vertex.label.dist=1,edge.label.cex=1) ;
g.River.4.sub<-make_ego_graph(g.River.3,2,as_ids(V(g.River.3.sub)), mode=c("all"))  ;
g.River.4.sub<-make_ego_graph(g.River.3,2,as_ids(V(g.River.3.sub)), mode=c("all"))  ;
V(g.River.4.sub[[3]])
as_long_data_frame(g.River.4.sub[[3]])
tkplot(g.River.4.sub[[3]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[3]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[3]])$Elev.Dif,3),vertex.label.dist=1,edge.label.cex=1) ;
tkplot(g.River.4.sub[[1]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[1]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[1]])$Elev.Dif,3),vertex.label.dist=1,edge.label.cex=1) ;
tkplot(g.River.4.sub[[2]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[2]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[2]])$Elev.Dif,3),vertex.label.dist=1,edge.label.cex=1) ;
dim(g.River.4.sub)
str(g.River.4.sub)
lenght(g.River.4.sub)
length(g.River.4.sub)
.libPaths("C:/Felipe/SotwareANDCoding/R_Library/library")  ;
install.packages('RCurl');
install.packages('rgdal');
install.packages('GSIF');
install.packages('raster');
install.packages('plotKML');
install.packages('XML');
install.packages('lattice');
install.packages('aqp');
install.packages('soiltexturep');
if(.Platform$OS.type == "windows")
if(.Platform$OS.type == "windows")
.Platform$OS.type
## (a) FTP download:
## location of soilgrids:
sg.ftp <- "ftp://ftp.soilgrids.org/data/recent/"
library(RCurl)
library(rgdal)
library(GSIF)
library(raster)
library(plotKML)
library(XML)
library(lattice)
library(aqp)
library(soiltexture)
## (a) FTP download:
## location of soilgrids:
sg.ftp <- "ftp://ftp.soilgrids.org/data/recent/"
getURL(sg.ftp, ftp.use.epsv = FALSE, dirlistonly = TRUE)
library(XML)
library(RCurl)
install.packages('RCurl',dependencies = T);
filenames = getURL(sg.ftp, ftp.use.epsv = FALSE, dirlistonly = TRUE)
library(RCurl)
install.packages('RCurl',dependencies = T);
.libPaths("C:/Felipe/SotwareANDCoding/R_Library/library")  ;
install.packages('RCurl',dependencies = T);
library(RCurl)
getURL(sg.ftp, ftp.use.epsv = FALSE, dirlistonly = TRUE)
library(RCurl)
library("RCurl", lib.loc="C:/Felipe/SotwareANDCoding/R_Library/library")
install.packages('bitops','RCurl',dependencies = T);
.libPaths("C:/Felipe/SotwareANDCoding/R_Library/library")  ;
install.packages('bitops','RCurl',dependencies = T);
library(RCurl)
.libPaths("C:/Felipe/SotwareANDCoding/R_Library/library")  ;
.libPaths("C:/Felipe/SotwareANDCoding/R_Library/library")  ;
library(RCurl)
library(rgdal)
library(GSIF)
library(raster)
library(plotKML)
library(XML)
library(lattice)
library(aqp)
library(soiltexture)
## GDAL paths:
if(.Platform$OS.type == "windows"){
gdal.dir <- shortPathName("C:/Program files/GDAL")
gdal_translate <- paste0(gdal.dir, "/gdal_translate.exe")
gdalwarp <- paste0(gdal.dir, "/gdalwarp.exe")
gdalinfo <- paste0(gdal.dir, "/gdalinfo.exe")
} else {
gdal_translate = "gdal_translate"
gdalwarp = "gdalwarp"
gdalinfo = "gdalinfo"
}
# ##-----------------------------------
# ## Accessing data
# ##-----------------------------------
#
# ## (a) FTP download:
# ## location of soilgrids:
# sg.ftp <- "ftp://ftp.soilgrids.org/data/recent/"
# filenames = getURL(sg.ftp, ftp.use.epsv = FALSE, dirlistonly = TRUE)
# filenames = strsplit(filenames, "\r*\n")[[1]]
# filenames[1:5]
#
# ## download to a local directory:
# ORC.name <- filenames[grep(filenames, pattern=glob2rx("ORCDRC_M_sl1_250m_ll.tif$"))]
# ORC.name
# try(download.file(paste(sg.ftp, ORC.name, sep=""), ORC.name))
# ## 2.8GB Geotiff!!
#
# ## check that everything is OK:
# GDALinfo(ORC.name)
#
# ## We focus on Ghana
# wg.url <- url("http://gsif.isric.org/lib/exe/fetch.php?media=admin.af.rda")
# load(wg.url)
# proj4string(admin.af) <- "+proj=longlat +datum=WGS84"
# country.af <- as(admin.af, "SpatialLines")
# ## Ghana bounding box:
# ghana <- admin.af[admin.af$FORMAL_EN=="Republic of Ghana",]
# ghana@bbox
#
# ## load soil Africa Soil Profile DB:
# data(afsp)
# sites <- afsp$sites
# coordinates(sites) <- ~ LONWGS84 + LATWGS84
# proj4string(sites) <- "+proj=longlat +datum=WGS84"
# #af.csy = "+proj=laea +lat_0=5 +lon_0=20 +x_0=0 +y_0=0 +units=m +ellps=WGS84 +datum=WGS84"
# #sites.af <- spTransform(sites, CRS(af.csy))
#
# ## plot country and profiles
# plot(ghana, col="red", lwd=2, asp=1)
# lines(country.af)
# points(sites, pch="+")
# ## in local projection system:
# #ghana.xy <- spTransform(ghana, CRS(af.csy))
# #ghana.xy@bbox
#
# ## get only Ghana:
# te = as.vector(ghana@bbox)
# unlink("ORC_sl1_Ghana.tif")
# system(paste0(gdalwarp, ' ', ORC.name, ' ORC_sl1_Ghana.tif -te ', paste(te, collapse=" ")))
# ORCDRC_sl1_ghana <- readGDAL("ORC_sl1_Ghana.tif")
# plot(log1p(raster(ORCDRC_sl1_ghana)), col=SAGA_pal[[1]])
#### This Seems the most efficient way to extract the soils from Kyrgyzstan #######
## (b) Web Coverage Service
## location of service:
# wcs = "http://webservices.isric.org/geoserver/wcs?"
# ## create an XML file:
# l1 <- newXMLNode("WCS_GDAL")
# l1.s <- newXMLNode("ServiceURL", wcs, parent=l1)
# l1.l <- newXMLNode("CoverageName", "orcdrc_m_sl1_250m", parent=l1)
# l1
# xml.out = "ORCDRC_M_sl1.xml"
# saveXML(l1, file=xml.out)
# ## check if the layer exists:
# system(paste(gdalinfo, xml.out))
## Alternative: calculate offset and region dims:
###### Get the bounding box region for Kyrgyzstan and then get the raster files for this sections######
ContryPolygonInfo<-ogrInfo("C:/Felipe/PIHM-CYCLES/PIHM/Soils/ISRICWorldSoils/KyrgyzstanPolygonWGS84.shp") ;
raster(system.file("https://files.isric.org/soilgrids/data/recent/ACDWRB_M_ss_250m_ll.tif", package="raster"))
raster(system.file("external/test.grd", package="raster"))
system.file("https://files.isric.org/soilgrids/data/recent/ACDWRB_M_ss_250m_ll.tif")
Bounding.box
ContryPolygonInfo<-ogrInfo("C:/Felipe/PIHM-CYCLES/PIHM/Soils/ISRICWorldSoils/KyrgyzstanPolygonWGS84.shp") ;
Bounding.box<-ContryPolygonInfo$extent;
Bounding.box
install.packages("jsonlite")
require(jsonlite)
coords <- c(45.5, 37.8)
fromJSON(paste0('https://rest.soilgrids.org/query?lon=',coords[1],'&lat=',coords[2],',&attributes=BLDFIE,SLTPPT,SNDPPT,CLYPPT'), flatten = TRUE)
install.packages('tibble', dependencies = T)
install.packages('readxl', dependencies = T)
library(readxl) ;
LaserDS.data<-read_excel("Laser and Std Results for SSSAJ.xlsx", sheet="Laser Diffraction-Sieving Data") ;
#  Tell the program where the package libraries are  #####################
.libPaths("C:/Felipe/SotwareANDCoding/R_Library/library")  ;
#  Set Working directory
setwd("C:\\Felipe\\LaserDifractionSoilTextureAnalysis\\Manuscript\\Review\\Second Review") ;
#Loand And install packages
#install.packages('tibble', dependencies = T)
#install.packages('readxl', dependencies = T)
library(readxl) ;
LaserDS.data<-read_excel("Laser and Std Results for SSSAJ.xlsx", sheet="Laser Diffraction-Sieving Data") ;
View(LaserDS.data)
View(LaserDS.data)
##############################################################################################################
#
#
# Program to verify the data from the table that it is going to be published as part of the Laser diffraction paper
#
# Felipe Montes 2019  05 07
#
#
#
#
###############################################################################################################
###############################################################################################################
#                          Loading Packages and setting up working directory
###############################################################################################################
#  Tell the program where the package libraries are  #####################
.libPaths("C:/Felipe/SotwareANDCoding/R_Library/library")  ;
#  Set Working directory
setwd("C:\\Felipe\\LaserDifractionSoilTextureAnalysis\\Manuscript") ;
#Loand And install packages
#install.packages('tibble', dependencies = T)
#install.packages('readxl', dependencies = T)
library(readxl) ;
library(XLConnect) ;
library(openxlsx) ;
###############################################################################################################
#                         Read data sets into R
###############################################################################################################
LaserDS.data<-read.xlsx("./Review/Second Review/Laser and Std Results for SSSAJ.xlsx", sheet="Laser Diffraction-Sieving Data", colNames=T) ;
names(LaserDS.data)
############################################## REad the names of the samples from the spreadsheet ######################################
LassDiff.name<-read.xlsx("C:/Felipe/LaserDifractionSoilTextureAnalysis/Manuscript/USDA Standards_PSA_Mastersizer_Felipe_20180824.xlsx", sheet="correct (6) fraction",startRow=2, colNames=F, rows=c(2)) ;
#grep("SRS",LassDiff.name)
############################################# Read the LD data from the spreadsheet  ########################################################
LassDiff.1<-read.xlsx("C:/Felipe/LaserDifractionSoilTextureAnalysis/Manuscript/USDA Standards_PSA_Mastersizer_Felipe_20180824.xlsx", sheet="correct (6) fraction",startRow=5, colNames=F, rows=c(5:104),skipEmptyCols=F) ;
tail(LassDiff.1)
str(LassDiff.1)
names(LassDiff.1)<-c('Row','Size', 'nothing' ,sapply(strsplit(as.character(LassDiff.name[1,]),"/"),"[", 1))
#####################################################  Organizing column names to compare them withw the spreadsheet names ##################
LassDiff.names1<-sapply(strsplit(names(LassDiff.1)[4:54]," "), "[",2) ;
LassDiff.names2<-sapply(strsplit(LassDiff.names1,"-5"),"[",1) ;
names(LaserDS.data) %in% LassDiff.names2
LassDiff.names2 %in% names(LaserDS.data)
str(names(LaserDS.data))
str(LassDiff.names2)
names(LaserDS.data)[c(1,21,31,43,46)]
match(names(LaserDS.data)[-1],LassDiff.names2)
match(LassDiff.names2,names(LaserDS.data)[-1])
names(LaserDS.data)[!(names(LaserDS.data) %in% LassDiff.names2)]
match(names(LaserDS.data)[!(names(LaserDS.data) %in% LassDiff.names2)], names(LaserDS.data))
LassDiff.names2[18]==names(LaserDS.data)[20]
L
LassDiff.names2<-sapply(strsplit(LassDiff.names1,"-5"),"[",1) ;
names(LaserDS.data) %in% LassDiff.names2
LassDiff.names2 %in% names(LaserDS.data)
match(names(LaserDS.data)[-1],LassDiff.names2)
match(LassDiff.names2,names(LaserDS.data)[-1])
names(LaserDS.data)[!(names(LaserDS.data) %in% LassDiff.names2)]
setwd("C:\\Felipe\\LaserDifractionSoilTextureAnalysis\\NAPTSoilsData") ;
library(readxl) ;
.libPaths("C:/Felipe/SotwareANDCoding/R_Library/library")  ;
library(readxl) ;
library(XLConnect) ;
library(openxlsx) ;
LaserDS.data<-read.xlsx("Laser and Std Results for SSSAJ.xlsx", sheet="Laser Diffraction-Sieving Data", colNames=T) ;
LassDiff.name<-read.xlsx("../Manuscript/USDA Standards_PSA_Mastersizer_Felipe_20180824.xlsx", sheet="correct (6) fraction",startRow=2, colNames=F, rows=c(2)) ;
LassDiff.1<-read.xlsx("C:/Felipe/LaserDifractionSoilTextureAnalysis/Manuscript/USDA Standards_PSA_Mastersizer_Felipe_20180824.xlsx", sheet="correct (6) fraction",startRow=5, colNames=F, rows=c(5:104),skipEmptyCols=F) ;
tail(LassDiff.1)
str(LassDiff.1)
names(LassDiff.1)<-c('Row','Size', 'nothing' ,sapply(strsplit(as.character(LassDiff.name[1,]),"/"),"[", 1))
LassDiff.names1<-sapply(strsplit(names(LassDiff.1)[4:54]," "), "[",2) ;
LassDiff.names2<-sapply(strsplit(LassDiff.names1,"-5"),"[",1) ;
names(LaserDS.data) %in% LassDiff.names2
LassDiff.names2 %in% names(LaserDS.data)
str(names(LaserDS.data))
str(LassDiff.names2)
names(LaserDS.data)[c(1,21,31,43,46)]
match(names(LaserDS.data)[-1],LassDiff.names2)
names(LaserDS.data)[!(names(LaserDS.data) %in% LassDiff.names2)]
match(names(LaserDS.data)[!(names(LaserDS.data) %in% LassDiff.names2)], names(LaserDS.data))
match(LassDiff.names2,names(LaserDS.data)[-1])
MassANDSand<-read.xlsx("../Manuscript/USDA Standards_PSA_Mastersizer_Felipe_20180824.xlsx", sheet="correct (6) fraction",startRow=111, rows=c(111,112), cols=(4:55), colNames=F) ;
StandardDataSSJ<-read.xlsx("Laser and Std Results for SSSAJ.xlsx", sheet="Standard Data", colNames=T) ;
View(StandardDataSSJ)
View(StandardDataSSJ)
names(StandardDataSSJ)
View(StandardDataSSJ)
View(StandardDataSSJ)
StandardDataSSJ<-read.xlsx("Laser and Std Results for SSSAJ.xlsx", sheet="Standard Data", colNames=T, startRow = 2 ) ;
View(StandardDataSSJ)
View(StandardDataSSJ)
