g.River.3.sub.data
g.River.3.sub.data<-as_long_data_frame(g.River.3.sub) ;
tkplot(g.River.3.sub,canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.label=g.River.3.sub.data$Point.ID.x, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.sub.data$Elev.Dif,3),edge.label.cex=1) ;
V(g.River.3.sub)
vertex.attributes(g.River.3.sub)
V(g.River.3.sub)$name
tkplot(g.River.3.sub,canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.3.sub)$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.sub.data$Elev.Dif,3),edge.label.cex=1) ;
V(g.River.3.sub)
str(V(g.River.3.sub))
V(g.River.3.sub)$name
make_ego_graph(g.River.3.sub,3,V(g.River.3.sub), mode=c("all"))
g.River.4.sub<-make_ego_graph(g.River.3.sub,3,V(g.River.3.sub), mode=c("all"))
as_long_data_frame(g.River.4.sub)
g.River.4.sub<-make_ego_graph(g.River.3.sub,3,V(g.River.3.sub), mode=c("all"))
as_long_data_frame(g.River.4.sub)
g <- make_ring(10)
g <- connect(g, 2)
tkplot(g)
g <- make_ring(10)
g <- make_ring(10)
tkplot(g)
as_long_data_frame(g.River.4.sub)[1]
as_long_data_frame(g.River.4.sub)[[1]]
as_long_data_frame(g.River.4.sub[[1]])
str(g.River.4.sub)
V(g.River.3.sub)
g.River.4.sub<-make_ego_graph(g.River.3.sub,4,V(g.River.3.sub), mode=c("all"))
as_long_data_frame(g.River.4.sub[[1]])
V(g.River.4.sub[[1]])
g.River.4.sub<-make_ego_graph(g.River.3,4,V(g.River.3.sub), mode=c("all"))
g <- make_ring(10)
as_ids(V(g))
as_ids(E(g))
V(g)$name <- letters[1:10]
as_ids(V(g))
as_ids(E(g))
g.River.4.sub<-make_ego_graph(g.River.3,4,as.ids(V(g.River.3.sub)), mode=c("all"))
g.River.4.sub<-make_ego_graph(g.River.3,4,as_ids(V(g.River.3.sub)), mode=c("all"))
V(g.River.4.sub[[1]])
tkplot(g.River.4.sub[1],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[1]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, vertex.label.dist=1,edge.label.cex=1) ;
g.River.4.sub[1]
tkplot(g.River.4.sub[1])
V(g)$name <- c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j")
make_ego_graph(g, 2, 1:3)
make_ego_graph(g, 2, 1:3)[[1]]
tkplot(make_ego_graph(g, 2, 1:3)[[1]])
g.River.4.sub<-make_ego_graph(g.River.3,4,as_ids(V(g.River.3.sub)), mode=c("all"))
V(g.River.4.sub[[1]])
tkplot(g.River.4.sub[1],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[1]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, vertex.label.dist=1,edge.label.cex=1) ;
tkplot(g.River.4.sub[[1]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[1]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, vertex.label.dist=1,edge.label.cex=1) ;
as_long_data_frame(g.River.4.sub[[1]])
tkplot(g.River.4.sub[[1]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[1]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[1]]$Elev.Dif,3))vertex.label.dist=1,edge.label.cex=1) ;
round(E(g.River.4.sub[[1]])$Elev.Dif,3)
tkplot(g.River.4.sub[[1]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[1]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[1]])$Elev.Dif,3)vertex.label.dist=1,edge.label.cex=1) ;
E(g.River.4.sub[[1]])
E(g.River.4.sub[[1]])$Elev.Dif
E(g.River.4.sub[[1]])$Elev.Dif
round(E(g.River.4.sub[[1]])$Elev.Dif,3)
tkplot(g.River.4.sub[[1]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[1]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[1]])$Elev.Dif,3),vertex.label.dist=1,edge.label.cex=1) ;
g.River.4.sub<-make_ego_graph(g.River.3,3,as_ids(V(g.River.3.sub)), mode=c("all"))
g.River.4.sub<-make_ego_graph(g.River.3,3,as_ids(V(g.River.3.sub)), mode=c("all"))
V(g.River.4.sub[[2]])
as_long_data_frame(g.River.4.sub[[1]])
tkplot(g.River.4.sub[[1]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[1]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[1]])$Elev.Dif,3),vertex.label.dist=1,edge.label.cex=1) ;
tkplot(g.River.4.sub[[2]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[2]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[2]])$Elev.Dif,3),vertex.label.dist=1,edge.label.cex=1) ;
tkplot(g.River.4.sub[[3]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[3]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[3]])$Elev.Dif,3),vertex.label.dist=1,edge.label.cex=1) ;
g.River.4.sub<-make_ego_graph(g.River.3,2,as_ids(V(g.River.3.sub)), mode=c("all"))  ;
g.River.4.sub<-make_ego_graph(g.River.3,2,as_ids(V(g.River.3.sub)), mode=c("all"))  ;
V(g.River.4.sub[[3]])
as_long_data_frame(g.River.4.sub[[3]])
tkplot(g.River.4.sub[[3]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[3]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[3]])$Elev.Dif,3),vertex.label.dist=1,edge.label.cex=1) ;
tkplot(g.River.4.sub[[1]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[1]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[1]])$Elev.Dif,3),vertex.label.dist=1,edge.label.cex=1) ;
tkplot(g.River.4.sub[[2]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[2]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[2]])$Elev.Dif,3),vertex.label.dist=1,edge.label.cex=1) ;
dim(g.River.4.sub)
str(g.River.4.sub)
lenght(g.River.4.sub)
length(g.River.4.sub)
.libPaths("C:/Felipe/SotwareANDCoding/R_Library/library")  ;
install.packages('RCurl');
install.packages('rgdal');
install.packages('GSIF');
install.packages('raster');
install.packages('plotKML');
install.packages('XML');
install.packages('lattice');
install.packages('aqp');
install.packages('soiltexturep');
if(.Platform$OS.type == "windows")
if(.Platform$OS.type == "windows")
.Platform$OS.type
## (a) FTP download:
## location of soilgrids:
sg.ftp <- "ftp://ftp.soilgrids.org/data/recent/"
library(RCurl)
library(rgdal)
library(GSIF)
library(raster)
library(plotKML)
library(XML)
library(lattice)
library(aqp)
library(soiltexture)
## (a) FTP download:
## location of soilgrids:
sg.ftp <- "ftp://ftp.soilgrids.org/data/recent/"
getURL(sg.ftp, ftp.use.epsv = FALSE, dirlistonly = TRUE)
library(XML)
library(RCurl)
install.packages('RCurl',dependencies = T);
filenames = getURL(sg.ftp, ftp.use.epsv = FALSE, dirlistonly = TRUE)
library(RCurl)
install.packages('RCurl',dependencies = T);
.libPaths("C:/Felipe/SotwareANDCoding/R_Library/library")  ;
install.packages('RCurl',dependencies = T);
library(RCurl)
getURL(sg.ftp, ftp.use.epsv = FALSE, dirlistonly = TRUE)
library(RCurl)
library("RCurl", lib.loc="C:/Felipe/SotwareANDCoding/R_Library/library")
install.packages('bitops','RCurl',dependencies = T);
.libPaths("C:/Felipe/SotwareANDCoding/R_Library/library")  ;
install.packages('bitops','RCurl',dependencies = T);
library(RCurl)
.libPaths("C:/Felipe/SotwareANDCoding/R_Library/library")  ;
.libPaths("C:/Felipe/SotwareANDCoding/R_Library/library")  ;
library(RCurl)
library(rgdal)
library(GSIF)
library(raster)
library(plotKML)
library(XML)
library(lattice)
library(aqp)
library(soiltexture)
## GDAL paths:
if(.Platform$OS.type == "windows"){
gdal.dir <- shortPathName("C:/Program files/GDAL")
gdal_translate <- paste0(gdal.dir, "/gdal_translate.exe")
gdalwarp <- paste0(gdal.dir, "/gdalwarp.exe")
gdalinfo <- paste0(gdal.dir, "/gdalinfo.exe")
} else {
gdal_translate = "gdal_translate"
gdalwarp = "gdalwarp"
gdalinfo = "gdalinfo"
}
# ##-----------------------------------
# ## Accessing data
# ##-----------------------------------
#
# ## (a) FTP download:
# ## location of soilgrids:
# sg.ftp <- "ftp://ftp.soilgrids.org/data/recent/"
# filenames = getURL(sg.ftp, ftp.use.epsv = FALSE, dirlistonly = TRUE)
# filenames = strsplit(filenames, "\r*\n")[[1]]
# filenames[1:5]
#
# ## download to a local directory:
# ORC.name <- filenames[grep(filenames, pattern=glob2rx("ORCDRC_M_sl1_250m_ll.tif$"))]
# ORC.name
# try(download.file(paste(sg.ftp, ORC.name, sep=""), ORC.name))
# ## 2.8GB Geotiff!!
#
# ## check that everything is OK:
# GDALinfo(ORC.name)
#
# ## We focus on Ghana
# wg.url <- url("http://gsif.isric.org/lib/exe/fetch.php?media=admin.af.rda")
# load(wg.url)
# proj4string(admin.af) <- "+proj=longlat +datum=WGS84"
# country.af <- as(admin.af, "SpatialLines")
# ## Ghana bounding box:
# ghana <- admin.af[admin.af$FORMAL_EN=="Republic of Ghana",]
# ghana@bbox
#
# ## load soil Africa Soil Profile DB:
# data(afsp)
# sites <- afsp$sites
# coordinates(sites) <- ~ LONWGS84 + LATWGS84
# proj4string(sites) <- "+proj=longlat +datum=WGS84"
# #af.csy = "+proj=laea +lat_0=5 +lon_0=20 +x_0=0 +y_0=0 +units=m +ellps=WGS84 +datum=WGS84"
# #sites.af <- spTransform(sites, CRS(af.csy))
#
# ## plot country and profiles
# plot(ghana, col="red", lwd=2, asp=1)
# lines(country.af)
# points(sites, pch="+")
# ## in local projection system:
# #ghana.xy <- spTransform(ghana, CRS(af.csy))
# #ghana.xy@bbox
#
# ## get only Ghana:
# te = as.vector(ghana@bbox)
# unlink("ORC_sl1_Ghana.tif")
# system(paste0(gdalwarp, ' ', ORC.name, ' ORC_sl1_Ghana.tif -te ', paste(te, collapse=" ")))
# ORCDRC_sl1_ghana <- readGDAL("ORC_sl1_Ghana.tif")
# plot(log1p(raster(ORCDRC_sl1_ghana)), col=SAGA_pal[[1]])
#### This Seems the most efficient way to extract the soils from Kyrgyzstan #######
## (b) Web Coverage Service
## location of service:
# wcs = "http://webservices.isric.org/geoserver/wcs?"
# ## create an XML file:
# l1 <- newXMLNode("WCS_GDAL")
# l1.s <- newXMLNode("ServiceURL", wcs, parent=l1)
# l1.l <- newXMLNode("CoverageName", "orcdrc_m_sl1_250m", parent=l1)
# l1
# xml.out = "ORCDRC_M_sl1.xml"
# saveXML(l1, file=xml.out)
# ## check if the layer exists:
# system(paste(gdalinfo, xml.out))
## Alternative: calculate offset and region dims:
###### Get the bounding box region for Kyrgyzstan and then get the raster files for this sections######
ContryPolygonInfo<-ogrInfo("C:/Felipe/PIHM-CYCLES/PIHM/Soils/ISRICWorldSoils/KyrgyzstanPolygonWGS84.shp") ;
raster(system.file("https://files.isric.org/soilgrids/data/recent/ACDWRB_M_ss_250m_ll.tif", package="raster"))
raster(system.file("external/test.grd", package="raster"))
system.file("https://files.isric.org/soilgrids/data/recent/ACDWRB_M_ss_250m_ll.tif")
Bounding.box
ContryPolygonInfo<-ogrInfo("C:/Felipe/PIHM-CYCLES/PIHM/Soils/ISRICWorldSoils/KyrgyzstanPolygonWGS84.shp") ;
Bounding.box<-ContryPolygonInfo$extent;
Bounding.box
install.packages("jsonlite")
require(jsonlite)
coords <- c(45.5, 37.8)
fromJSON(paste0('https://rest.soilgrids.org/query?lon=',coords[1],'&lat=',coords[2],',&attributes=BLDFIE,SLTPPT,SNDPPT,CLYPPT'), flatten = TRUE)
##############################################################################################################
#
#
# Program to verify the data from the table that it is going to be published as part of the Laser diffraction paper
#
# Felipe Montes 2019  05 07
#
#
#
#
###############################################################################################################
###############################################################################################################
#                          Loading Packages and setting up working directory
###############################################################################################################
#  Tell the program where the package libraries are  #####################
.libPaths("C:/Felipe/SotwareANDCoding/R_Library/library")  ;
#  Set Working directory
setwd("C:\\Felipe\\LaserDifractionSoilTextureAnalysis\\NAPTSoilsData") ;
#Loand And install packages
#install.packages('tibble', dependencies = T)
#install.packages('readxl', dependencies = T)
library(readxl) ;
library(XLConnect) ;
library(openxlsx) ;
###############################################################################################################
#                         Read Standard data into R and compare them.
###############################################################################################################
StandardDataSSJ<-read.xlsx("Laser and Std Results for SSSAJ.xlsx", sheet="Standard Data", colNames=T, startRow = 2 ) ;
names(StandardDataSSJ)
names(StandardDataSSJ)<-c("Sample", "P_CLAY",   "P_SILT" ,  "P_SAND" ,  "H_CLAY"  , "H_SILT"  , "H_SAND"  )
Ordered.DataSSJ<-StandardDataSSJ[order(StandardDataSSJ$Sample),]
Table1.names<-read.xlsx("../Manuscript/Table1_20190510.xlsx", sheet="New (5)", colNames=F, startRow = 1, rows=c(1,2) ) ;
as.character(Table1.names[1,])
Table1.data<-read.xlsx("../Manuscript/Table1_20190510.xlsx", sheet="New (5)", colNames=F, startRow = 3 ) ;
names(Table1.data)<-as.character(Table1.names[1,])
names(Table1.data)<-c("Sample" , "Location",   "Soil classification" ,"P_Sand",  "P_Silt" , "P_Clay" , "n" ,"H_Sand", "H_Silt" , "H_Clay",                "n" , "TOC " , "CaCO3" )
Ordered.Table1<-Table1.data[order(Table1.data$Sample),]
plot(as.numeric(Ordered.DataSSJ$P_CLAY)*100, type="p", pch=21, col="RED", cex=1.5, bg=NA)
points(Ordered.Table1$P_Clay, type="p" , pch=21, col="BLUE", bg="BLUE")
plot(as.numeric(Ordered.DataSSJ$P_SILT)*100, type="p", pch=21, col="RED", cex=1.5, bg=NA)
points(Ordered.Table1$P_Silt, type="p" , pch=21, col="BLUE", bg="BLUE")
plot(as.numeric(Ordered.DataSSJ$P_SAND)*100, type="p", pch=21, col="RED", cex=1.5, bg=NA)
points(Ordered.Table1$P_Sand, type="p" , pch=21, col="BLUE", bg="BLUE")
plot(as.numeric(Ordered.DataSSJ$H_CLAY)*100, type="p", pch=21, col="RED", cex=1.5, bg=NA)
points(Ordered.Table1$H_Clay, type="p" , pch=21, col="BLUE", bg="BLUE")
plot(as.numeric(Ordered.DataSSJ$H_SILT)*100, type="p", pch=21, col="RED", cex=1.5, bg=NA)
points(Ordered.Table1$H_Silt, type="p" , pch=21, col="BLUE", bg="BLUE")
plot(as.numeric(Ordered.DataSSJ$H_SAND)*100, type="p", pch=21, col="RED", cex=1.5, bg=NA)
points(Ordered.Table1$H_Sand, type="p" , pch=21, col="BLUE", bg="BLUE")
###############################################################################################################
#                         Read Laser Diff  data into R and compare them.
###############################################################################################################
############################################## Read the names of the samples from the spreadsheet ######################################
LaserSSAJ.data<-read.xlsx("Laser and Std Results for SSSAJ.xlsx", sheet="Laser Diffraction-Sieving Data", colNames=T) ;
names(LaserSSAJ.data)
LaserSSAJ<-LaserSSAJ.data[,order(names(LaserSSAJ.data))]
LassDiff.name<-read.xlsx("../Manuscript/USDA Standards_PSA_Mastersizer_Felipe_20180824.xlsx", sheet="correct (6) fraction",startRow=2, colNames=F, rows=c(2)) ;
LassDiff.1<-read.xlsx("C:/Felipe/LaserDifractionSoilTextureAnalysis/Manuscript/USDA Standards_PSA_Mastersizer_Felipe_20180824.xlsx", sheet="correct (6) fraction",startRow=5, colNames=F, rows=c(5:104),skipEmptyCols=F) ;
tail(LassDiff.1)
str(LassDiff.1)
names(LassDiff.1)<-c('Row','Size', 'nothing' ,sapply(strsplit(as.character(LassDiff.name[1,]),"/"),"[", 1))
LassDiff.names1<-sapply(strsplit(names(LassDiff.1)[4:54]," "), "[",2) ;
LassDiff.names2<-sapply(strsplit(LassDiff.names1,"-5"),"[",1) ;
names(LassDiff.1)<-c('Row','Size', 'nothing' ,LassDiff.names2)
names(LassDiff.1[,c(2,4:54)])
LassDiff.2<-LassDiff.1[,order(names(LassDiff.1))]
LassDiff.3<-LassDiff.2[,-17]
for (i in seq(1,50)) {
barplot(LassDiff.3[,i], names.arg=LassDiff.3$Size, col="RED", ylab=names(LassDiff.3)[i], main = i)
barplot(LaserSSAJ[,i], names.arg=LaserSSAJ$Size, add=T, col=NA, border= "BLUE", ylab=names(LaserSSAJ)[i], mgp=c(2,1,0))
}
for (i in seq(1,38)) {
barplot(LassDiff.3[,i], names.arg=LassDiff.3$Size, col="RED", ylab=names(LassDiff.3)[i], main = i)
barplot(LaserSSAJ[,i], names.arg=LaserSSAJ$Size, add=T, col=NA, border= "BLUE", ylab=names(LaserSSAJ)[i], mgp=c(2,1,0))
}
LassDiff.3[,39]
barplot(LassDiff.3[,39], names.arg=LassDiff.3$Size, col="RED", ylab=names(LassDiff.3)[39], main = 39)
barplot(LaserSSAJ[,39], names.arg=LaserSSAJ$Size, add=T, col=NA, border= "BLUE", ylab=names(LaserSSAJ)[39], mgp=c(2,1,0))
View(LassDiff.3)
View(LassDiff.3)
View(LaserSSAJ)
View(LaserSSAJ)
names(LassDiff.3)[39]
names(LaserSSAJ)[44]
names(LaserSSAJ)[42]
names(LaserSSAJ)[43]
barplot(LassDiff.3[,39], names.arg=LassDiff.3$Size, col="RED", ylab=names(LassDiff.3)[39], main = 39)
barplot(LaserSSAJ[,43], names.arg=LaserSSAJ$Size, add=T, col=NA, border= "BLUE", ylab=names(LaserSSAJ)[43], mgp=c(2,1,0))
barplot(LassDiff.3[,40], names.arg=LassDiff.3$Size, col="RED", ylab=names(LassDiff.3)[40], main = 40)
barplot(LaserSSAJ[,43], names.arg=LaserSSAJ$Size, add=T, col=NA, border= "BLUE", ylab=names(LaserSSAJ)[43], mgp=c(2,1,0))
barplot(LassDiff.3[,40], names.arg=LassDiff.3$Size, col="RED", ylab=names(LassDiff.3)[40], main = 40)
barplot(LaserSSAJ[,44], names.arg=LaserSSAJ$Size, add=T, col=NA, border= "BLUE", ylab=names(LaserSSAJ)[44], mgp=c(2,1,0))
barplot(LassDiff.3[,i], names.arg=LassDiff.3$Size, col="RED", ylab=names(LassDiff.3)[i], main = i)
barplot(LaserSSAJ[,i+4], names.arg=LaserSSAJ$Size, add=T, col=NA, border= "BLUE", ylab=names(LaserSSAJ)[i+4], mgp=c(2,1,0))
i
i+4
barplot(LassDiff.3[,i], names.arg=LassDiff.3$Size, col="RED", ylab=names(LassDiff.3)[i], main = c(i,i+5))
barplot(LaserSSAJ[,i+5], names.arg=LaserSSAJ$Size, add=T, col=NA, border= "BLUE", ylab=names(LaserSSAJ)[i+5], mgp=c(2,1,0))
barplot(LassDiff.3[,i], names.arg=LassDiff.3$Size, col="RED", ylab=names(LassDiff.3)[i], main = c(i,i+5))
barplot(LaserSSAJ[,i+5], names.arg=LaserSSAJ$Size, add=T, col=NA, border= "BLUE", ylab=names(LaserSSAJ)[i+5], mgp=c(2,1,0))
i=39
barplot(LassDiff.3[,i], names.arg=LassDiff.3$Size, col="RED", ylab=names(LassDiff.3)[i], main = c(i,i+4))
barplot(LaserSSAJ[,i+4], names.arg=LaserSSAJ$Size, add=T, col=NA, border= "BLUE", ylab=names(LaserSSAJ)[i+4], mgp=c(2,1,0))
i=40
barplot(LassDiff.3[,i], names.arg=LassDiff.3$Size, col="RED", ylab=names(LassDiff.3)[i], main = c(i,i+4))
barplot(LaserSSAJ[,i+4], names.arg=LaserSSAJ$Size, add=T, col=NA, border= "BLUE", ylab=names(LaserSSAJ)[i+4], mgp=c(2,1,0))
i=41
barplot(LassDiff.3[,i], names.arg=LassDiff.3$Size, col="RED", ylab=names(LassDiff.3)[i], main = c(i,i+4))
barplot(LaserSSAJ[,i+4], names.arg=LaserSSAJ$Size, add=T, col=NA, border= "BLUE", ylab=names(LaserSSAJ)[i+4], mgp=c(2,1,0))
i=42
barplot(LassDiff.3[,i], names.arg=LassDiff.3$Size, col="RED", ylab=names(LassDiff.3)[i], main = c(i,i+4))
barplot(LaserSSAJ[,i+4], names.arg=LaserSSAJ$Size, add=T, col=NA, border= "BLUE", ylab=names(LaserSSAJ)[i+4], mgp=c(2,1,0))
i=43
barplot(LassDiff.3[,i], names.arg=LassDiff.3$Size, col="RED", ylab=names(LassDiff.3)[i], main = c(i,i+4))
barplot(LaserSSAJ[,i+4], names.arg=LaserSSAJ$Size, add=T, col=NA, border= "BLUE", ylab=names(LaserSSAJ)[i+4], mgp=c(2,1,0))
i=44
barplot(LassDiff.3[,i], names.arg=LassDiff.3$Size, col="RED", ylab=names(LassDiff.3)[i], main = c(i,i+4))
barplot(LaserSSAJ[,i+4], names.arg=LaserSSAJ$Size, add=T, col=NA, border= "BLUE", ylab=names(LaserSSAJ)[i+4], mgp=c(2,1,0))
i=45
barplot(LassDiff.3[,i], names.arg=LassDiff.3$Size, col="RED", ylab=names(LassDiff.3)[i], main = c(i,i+4))
barplot(LaserSSAJ[,i+4], names.arg=LaserSSAJ$Size, add=T, col=NA, border= "BLUE", ylab=names(LaserSSAJ)[i+4], mgp=c(2,1,0))
i=46
barplot(LassDiff.3[,i], names.arg=LassDiff.3$Size, col="RED", ylab=names(LassDiff.3)[i], main = c(i,i+4))
barplot(LaserSSAJ[,i+4], names.arg=LaserSSAJ$Size, add=T, col=NA, border= "BLUE", ylab=names(LaserSSAJ)[i+4], mgp=c(2,1,0))
i=47
barplot(LassDiff.3[,i], names.arg=LassDiff.3$Size, col="RED", ylab=names(LassDiff.3)[i], main = c(i,i+4))
barplot(LaserSSAJ[,i+4], names.arg=LaserSSAJ$Size, add=T, col=NA, border= "BLUE", ylab=names(LaserSSAJ)[i+4], mgp=c(2,1,0))
i=48
barplot(LassDiff.3[,i], names.arg=LassDiff.3$Size, col="RED", ylab=names(LassDiff.3)[i], main = c(i,i+4))
barplot(LaserSSAJ[,i+4], names.arg=LaserSSAJ$Size, add=T, col=NA, border= "BLUE", ylab=names(LaserSSAJ)[i+4], mgp=c(2,1,0))
for (j in seq(39,47) {
barplot(LassDiff.3[,j], names.arg=LassDiff.3$Size, col="RED", ylab=names(LassDiff.3)[j], main = c(j,j+4))
barplot(LaserSSAJ[,j+4], names.arg=LaserSSAJ$Size, add=T, col=NA, border= "BLUE", ylab=names(LaserSSAJ)[j+4], mgp=c(2,1,0))
}
for (j in seq(39,47)) {
barplot(LassDiff.3[,j], names.arg=LassDiff.3$Size, col="RED", ylab=names(LassDiff.3)[j], main = c(j,j+4))
barplot(LaserSSAJ[,j+4], names.arg=LaserSSAJ$Size, add=T, col=NA, border= "BLUE", ylab=names(LaserSSAJ)[j+4], mgp=c(2,1,0))
}
names(LassDiff.3)[48]
51:53
for (h in seq(51:53)) {
barplot(LassDiff.3[,h], names.arg=LassDiff.3$Size, col="RED", ylab=names(LassDiff.3)[h], main = c(h,h+2))
barplot(LaserSSAJ[,h+2], names.arg=LaserSSAJ$Size, add=T, col=NA, border= "BLUE", ylab=names(LaserSSAJ)[h+2], mgp=c(2,1,0))
}
seq(51:53)
for (h in seq(51,53)) {
barplot(LassDiff.3[,h], names.arg=LassDiff.3$Size, col="RED", ylab=names(LassDiff.3)[h], main = c(h,h+2))
barplot(LaserSSAJ[,h+2], names.arg=LaserSSAJ$Size, add=T, col=NA, border= "BLUE", ylab=names(LaserSSAJ)[h+2], mgp=c(2,1,0))
}
SandSSAJ.data<-read.xlsx("Laser and Std Results for SSSAJ.xlsx", sheet="Sand Content", colNames=T) ;
names(SandSSAJ)
names(SandSSAJ.data)
SandSSAJ<-LaserSSAJ.data[,order(names(SandSSAJ.data))]
names(SandSSAJ)
MassANDSand<-read.xlsx("../Manuscript/USDA Standards_PSA_Mastersizer_Felipe_20180824.xlsx", sheet="correct (6) fraction",startRow=111, rows=c(111,112), cols=(4:55), colNames=F) ;
View(MassANDSand)
View(MassANDSand)
LassDiff.name
names(LassDiff.1)
names(MassANDSand)<-names(LassDiff.1);
names(LassDiff.1)[3:54]
names(LassDiff.1)[4:54]
names(MassANDSand)<-names(LassDiff.1)[4:54];
MassANDSand
View(MassANDSand)
View(MassANDSand)
str(MassANDSand)
MassANDSand[3,]<-MassANDSand[,2]/MassANDSand[,1]
t(MassANDSand[,2])/t(MassANDSand[,1])
MassANDSand[3,]<-t(MassANDSand[,2])/(MassANDSand[,1])
t(MassANDSand[,2])
MassANDSand[,2]
MassANDSand<-read.xlsx("../Manuscript/USDA Standards_PSA_Mastersizer_Felipe_20180824.xlsx", sheet="correct (6) fraction",startRow=111, rows=c(111,112), cols=(4:55), colNames=F) ;
names(LassDiff.1)
names(MassANDSand)<-names(LassDiff.1)[4:54]   ;
str(MassANDSand)
t(MassANDSand[,2])
t(MassANDSand)
t(MassANDSand)[,2]/t(MassANDSand)[,1]
MassANDSand[3,]<-t(MassANDSand)[,2]/t(MassANDSand)[,1]  ;
MassANDSand
MassANDSand.1<-MassANDSand[,order(names(MassANDSand))]
MassANDSand.1
SandSSAJ.data<-read.xlsx("Laser and Std Results for SSSAJ.xlsx", sheet="Sand Content", colNames=T) ;
names(SandSSAJ.data)
SandSSAJ<-LaserSSAJ.data[,order(names(SandSSAJ.data))]
names(SandSSAJ)
plot(MassANDSand.1*100, type="p", pch=21, col="RED", cex=1.5, bg=NA)
MassANDSand.1[3,]
plot(MassANDSand.1[3,]*100, type="p", pch=21, col="RED", cex=1.5, bg=NA)
plot(MassANDSand.1[3,]*100,  pch=21, col="RED", cex=1.5, bg=NA)
MassANDSand.1[3,]*100
plot(as.numeric(Ordered.DataSSJ$P_CLAY)*100, type="p", pch=21, col="RED", cex=1.5, bg=NA)
points(Ordered.Table1$P_Clay, type="p" , pch=21, col="BLUE", bg="BLUE")
str(MassANDSand.1)
plot(t(MassANDSand.1)[,3]*100,  pch=21, col="RED", cex=1.5, bg=NA)
str(SandSSAJ)
SandSSAJ
SandSSAJ.data<-read.xlsx("Laser and Std Results for SSSAJ.xlsx", sheet="Sand Content", colNames=T) ;
names(SandSSAJ.data)
SandSSAJ<-LaserSSAJ.data[,order(names(SandSSAJ.data))]
names(SandSSAJ)
str(SandSSAJ)
names(SandSSAJ.data)
SandSSAJ.1<-SandSSAJ.data[,order(names(SandSSAJ.data))]
names(SandSSAJ)
str(SandSSAJ)
points(t(SandSSAJ.1)[,1], type="p" , pch=21, col="BLUE", bg="BLUE")
points(t(SandSSAJ.1)[,2], type="p" , pch=21, col="BLUE", bg="BLUE")
plot(t(MassANDSand.1)[,3]*100,  pch=21, col="RED", cex=1.5, bg=NA)
points(t(SandSSAJ.1)[,2], type="p" , pch=21, col="BLUE", bg="BLUE")
plot(t(MassANDSand.1)[1:20,3]*100,  pch=21, col="RED", cex=1.5, bg=NA)
points(t(SandSSAJ.1)[1:20,2], type="p" , pch=21, col="BLUE", bg="BLUE")
plot(t(MassANDSand.1)[1:21,3]*100,  pch=21, col="RED", cex=1.5, bg=NA)
points(t(SandSSAJ.1)[1:21,2], type="p" , pch=21, col="BLUE", bg="BLUE")
t(MassANDSand.1)[1:21,3]*100-t(SandSSAJ.1)[1:21,2]
t(SandSSAJ.1)[1:21,2]
t(MassANDSand.1)[1:21,3]*100-as.numeric(t(SandSSAJ.1)[1:21,2])
plot(t(MassANDSand.1)[1:21,3]*100-as.numeric(t(SandSSAJ.1)[1:21,2]))
plot(t(MassANDSand.1)[,3]*100-as.numeric(t(SandSSAJ.1)[,2]))
View(MassANDSand.1)
View(MassANDSand.1)
View(SandSSAJ.1)
View(SandSSAJ.1)
text(t(MassANDSand.1)[,3]*100-as.numeric(t(SandSSAJ.1)[,2]),names)
text(t(MassANDSand.1)[,3]*100-as.numeric(t(SandSSAJ.1)[,2]),names(MassANDSand.1) )
plot(t(MassANDSand.1)[,3]*100-as.numeric(t(SandSSAJ.1)[,2]))
text(t(MassANDSand.1)[,3]*100-as.numeric(t(SandSSAJ.1)[,2]),names(MassANDSand.1), pos=1, cex=0.5, col="RED" )
text(t(MassANDSand.1)[,3]*100-as.numeric(t(SandSSAJ.1)[,2]),names(SandSSAJ.1), pos=3, cex=0.5, col="BLUE" )
plot(t(MassANDSand.1)[1:19,3]*100-as.numeric(t(SandSSAJ.1)[1:19,2]))
text(t(MassANDSand.1)[,3]*100-as.numeric(t(SandSSAJ.1)[,2]),names(MassANDSand.1), pos=3, cex=0.5, col="RED" )
plot(t(MassANDSand.1)[1:16,3]*100-as.numeric(t(SandSSAJ.1)[1:16,2]))
plot(t(MassANDSand.1)[1:16,3]*100-as.numeric(t(SandSSAJ.1)[1:16,2]))
plot(t(MassANDSand.1)[1:17,3]*100-as.numeric(t(SandSSAJ.1)[1:17,2]))
text(t(MassANDSand.1)[,3]*100-as.numeric(t(SandSSAJ.1)[,2]),names(MassANDSand.1), pos=3, cex=0.5, col="RED" )
text(t(MassANDSand.1)[,3]*100-as.numeric(t(SandSSAJ.1)[,2]),names(SandSSAJ.1), pos=2, cex=0.5, col="BLUE" )
plot(t(MassANDSand.1)[18:54,3]*100-as.numeric(t(SandSSAJ.1)[17:54,2]))
plot(t(MassANDSand.1)[18:54,3]*100-as.numeric(t(SandSSAJ.1)[17:53,2]))
t(MassANDSand.1)[18:54,3]
str(MassANDSand.1)
plot(t(MassANDSand.1)[18:51,3]*100-as.numeric(t(SandSSAJ.1)[17:50,2]))
text(t(MassANDSand.1)[,3]*100-as.numeric(t(SandSSAJ.1)[,2]),names(MassANDSand.1), pos=3, cex=0.5, col="RED" )
text(t(MassANDSand.1)[,3]*100-as.numeric(t(SandSSAJ.1)[,2]),names(SandSSAJ.1), pos=2, cex=0.5, col="BLUE" )
plot(t(MassANDSand.1)[18:25,3]*100-as.numeric(t(SandSSAJ.1)[17:24,2]))
plot(t(MassANDSand.1)[18:30,3]*100-as.numeric(t(SandSSAJ.1)[17:29,2]))
plot(t(MassANDSand.1)[18:35,3]*100-as.numeric(t(SandSSAJ.1)[17:34,2]))
plot(t(MassANDSand.1)[18:40,3]*100-as.numeric(t(SandSSAJ.1)[17:39,2]))
plot(t(MassANDSand.1)[18:39,3]*100-as.numeric(t(SandSSAJ.1)[17:38,2]))
text(t(MassANDSand.1)[,3]*100-as.numeric(t(SandSSAJ.1)[,2]),names(MassANDSand.1), pos=3, cex=0.5, col="RED" )
text(t(MassANDSand.1)[,3]*100-as.numeric(t(SandSSAJ.1)[,2]),names(SandSSAJ.1), pos=2, cex=0.5, col="BLUE" )
text(t(MassANDSand.1)[,3]*100),names(MassANDSand.1), pos=3, cex=0.5, col="RED" )
text(t(MassANDSand.1)[,3]*100,names(MassANDSand.1), pos=3, cex=0.5, col="RED" )
plot(t(MassANDSand.1)[18:39,3]*100-as.numeric(t(SandSSAJ.1)[17:38,2]))
text(t(MassANDSand.1)[18:39,3]*100-as.numeric(t(SandSSAJ.1)[17:38,2]),names(MassANDSand.1), pos=3, cex=0.5, col="RED" )
text(t(MassANDSand.1)[18:39,3]*100-as.numeric(t(SandSSAJ.1)[17:38,2]),names(SandSSAJ.1), pos=2, cex=0.5, col="BLUE" )
text(t(MassANDSand.1)[18:39,3]*100-as.numeric(t(SandSSAJ.1)[17:38,2]),names(MassANDSand.1), pos=3, cex=0.8, col="RED" )
text(t(MassANDSand.1)[18:39,3]*100-as.numeric(t(SandSSAJ.1)[17:38,2]),names(SandSSAJ.1), pos=2, cex=0.8, col="BLUE" )
plot(t(MassANDSand.1)[18:39,3]*100-as.numeric(t(SandSSAJ.1)[17:38,2]))
text(t(MassANDSand.1)[18:39,3]*100-as.numeric(t(SandSSAJ.1)[17:38,2]),names(MassANDSand.1), pos=3, cex=0.8, col="RED" )
text((t(MassANDSand.1)[18:39,3]*100-as.numeric(t(SandSSAJ.1)[17:38,2])),names(MassANDSand.1), pos=3, cex=0.8, col="RED" )
plot(t(MassANDSand.1)[18:39,3]*100-as.numeric(t(SandSSAJ.1)[17:38,2]))
text((t(MassANDSand.1)[18:39,3]*100-as.numeric(t(SandSSAJ.1)[17:38,2])),names(MassANDSand.1), pos=3, cex=0.8, col="RED" )
text((t(MassANDSand.1)[18:39,3]*100-as.numeric(t(SandSSAJ.1)[17:38,2])),names(MassANDSand.1)[17:38], pos=3, cex=0.8, col="RED" )
plot(t(MassANDSand.1)[18:39,3]*100-as.numeric(t(SandSSAJ.1)[17:38,2]))
text((t(MassANDSand.1)[18:39,3]*100-as.numeric(t(SandSSAJ.1)[17:38,2])),names(MassANDSand.1)[17:38], pos=3, cex=0.8, col="RED" )
text(t(MassANDSand.1)[18:39,3]*100-as.numeric(t(SandSSAJ.1)[17:38,2]),names(SandSSAJ.1)[17:38], pos=2, cex=0.8, col="BLUE" )
plot(t(MassANDSand.1)[18:39,3]*100-as.numeric(t(SandSSAJ.1)[17:38,2]))
text((t(MassANDSand.1)[18:39,3]*100-as.numeric(t(SandSSAJ.1)[17:38,2])),names(MassANDSand.1)[18:39], pos=3, cex=0.8, col="RED" )
text(t(MassANDSand.1)[18:39,3]*100-as.numeric(t(SandSSAJ.1)[17:38,2]),names(SandSSAJ.1)[17:38], pos=2, cex=0.8, col="BLUE" )
plot(t(MassANDSand.1)[18:39,3]*100-as.numeric(t(SandSSAJ.1)[17:38,2]))
text((t(MassANDSand.1)[18:39,3]*100-as.numeric(t(SandSSAJ.1)[17:38,2])),names(MassANDSand.1)[18:39], pos=3, cex=0.8, col="RED" )
text(t(MassANDSand.1)[18:39,3]*100-as.numeric(t(SandSSAJ.1)[17:38,2]),names(SandSSAJ.1)[17:38], pos=1, cex=0.8, col="BLUE" )
plot(t(MassANDSand.1)[40,3]*100-as.numeric(t(SandSSAJ.1)[41,2]))
plot(t(MassANDSand.1)[40,3]*100-as.numeric(t(SandSSAJ.1)[39,2]))
text((t(MassANDSand.1)[40,3]*100-as.numeric(t(SandSSAJ.1)[39,2])),names(MassANDSand.1)[40], pos=3, cex=0.8, col="RED" )
text(t(MassANDSand.1)[40,3]*100-as.numeric(t(SandSSAJ.1)[39,2]),names(SandSSAJ.1)[39], pos=1, cex=0.8, col="BLUE" )
plot(t(MassANDSand.1)[40,3]*100-as.numeric(t(SandSSAJ.1)[43,2]))
plot(t(MassANDSand.1)[40,3]*100-as.numeric(t(SandSSAJ.1)[43,2]))
text((t(MassANDSand.1)[40,3]*100-as.numeric(t(SandSSAJ.1)[43,2])),names(MassANDSand.1)[40], pos=3, cex=0.8, col="RED" )
text(t(MassANDSand.1)[40,3]*100-as.numeric(t(SandSSAJ.1)[43,2]),names(SandSSAJ.1)[43], pos=1, cex=0.8, col="BLUE" )
plot(t(MassANDSand.1)[40:50,3]*100-as.numeric(t(SandSSAJ.1)[43:53,2]))
plot(t(MassANDSand.1)[40:50,3]*100-as.numeric(t(SandSSAJ.1)[43:53,2]))
MassANDSand<-read.xlsx("../Manuscript/USDA Standards_PSA_Mastersizer_Felipe_20180824.xlsx", sheet="correct (6) fraction",startRow=111, rows=c(111,112), cols=(4:55), colNames=F) ;
plot(t(MassANDSand.1)[40:50,3]*100-as.numeric(t(SandSSAJ.1)[43:53,2]))
text((t(MassANDSand.1)[40:50,3]*100-as.numeric(t(SandSSAJ.1)[43:53,2])),names(MassANDSand.1)[40:50], pos=3, cex=0.8, col="RED" )
text(t(MassANDSand.1)[40:53,3]*100-as.numeric(t(SandSSAJ.1)[43:53,2]),names(SandSSAJ.1)[43:53], pos=1, cex=0.8, col="BLUE" )
text(t(MassANDSand.1)[40:50,3]*100-as.numeric(t(SandSSAJ.1)[43:53,2]),names(SandSSAJ.1)[43:53], pos=1, cex=0.8, col="BLUE" )
plot(t(MassANDSand.1)[40:51,3]*100-as.numeric(t(SandSSAJ.1)[43:54,2]))
text((t(MassANDSand.1)[40:51,3]*100-as.numeric(t(SandSSAJ.1)[43:54,2])),names(MassANDSand.1)[40:51], pos=3, cex=0.8, col="RED" )
text(t(MassANDSand.1)[40:51,3]*100-as.numeric(t(SandSSAJ.1)[43:54,2]),names(SandSSAJ.1)[43:54], pos=1, cex=0.8, col="BLUE" )
