PiC.type  = "t"
)
ALLP.data$ANALYSIS<-c('Hydrometer') ;
ALLP.data$TextureClass<-ALLP.Texture.clases ;
####### Get all the data together to plot
head(ALLP.data)
str(ALLP.data)
head(NAPT.all)
str(NAPT.all)
NAPT<-NAPT.all[,c('SAMPLE', 'SAND.Med' , 'SILT.Med', 'CLAY.Med', 'TextureClass')];
names(NAPT)<-c('SAMPLE', 'SAND' , 'SILT', 'CLAY', 'TextureClass' );
head(NAPT)
ALLP<-ALLP.data[,c('SAMPLE', 'SAND.MEAN' , 'SILT.MEAN', 'CLAY.MEAN', 'TextureClass')];
names(ALLP)<-c('SAMPLE', 'SAND' , 'SILT', 'CLAY', 'TextureClass');
head(ALLP)
All.Data<-rbind(NAPT,ALLP) ;
head(All.Data)
tail(All.Data)
str(All.Data)
######Transform the Texture Class variabl into a Factor
All.Data$TextureFactor<-as.factor(All.Data$TextureClass) ;
levels(All.Data$TextureFactor)
for (i in levels(All.Data$TextureFactor)) {
#i=levels(All.Data$TextureFactor)[1]
assign(paste0('Texture_',i),All.Data[All.Data$TextureFactor==i,])
}
head(Texture_C)
################### Select the Samples
Selected_Samples<-rbind(Texture_C, Texture_CL[1:6,] , Texture_LS[1:6,], Texture_S[1:6,],Texture_SCL, Texture_SICL[1:6,],Texture_SIL[1:6,], Texture_SL[1:6,])
head(Selected_Samples)
names(Selected_Samples)[1:6]<-c('CLAY_Norm' , 'SILT_Norm' , 'SAND_Norm', 'SAND' , 'SILT' , 'CLAY')  ;
##### Sample 2011-112 was not available  ######
#Paper.Samples<-Selected_Samples[,c('CLAY_Norm' , 'SILT_Norm' , 'SAND_Norm')] ;
# writeWorksheetToFile("Results_data_all.xlsx",Selected_Samples, sheet="Selected_Original") ;
########################################################################################################################################
#
#
#                     !IMPORTANT NOTE!
#       AFTER WORKING ON THE CODE TO GET THE MOST OF THE DATA READ, A FEW POINTS AND SUMARIES COULD NOT BE READ FOMR THE
#       DO TO THE QUALITY OF THE PDF'S.  THEREFORE THE "Selected_Original" SPREADSHEET IN EXCELL WAS UPDATED AND SAVED WITH
#       THE NAME "Selected_Final".  THAT IS THE TABLE THAT HAS THE FINAL SAMPLE SELECTION
#
#
########################################################################################################################################
##### Reading the table with the final selection of the samples and their data ################################
Paper.Samples<-readWorksheetFromFile("Results_data_all.xlsx", sheet="Selected_Final",startCol= 1, endCol=10) ;
head(Paper.Samples)
########### Plot all the data together the Data ######################
geo.ALLP<-TT.plot(
class.sys          ="USDA-NCSS.TT",
frame.bg.col       ="gray75",
bg                 ="white"
)
###### Plot Option 1 ##################
TT.plot(
#geo.ALLP,
class.sys          ="USDA-NCSS.TT",
main               ="USDA - NCRCS Texture classification for the NAPT, ALP and selected soil samples",
tri.data           = Paper.Samples,
css.names          =c('CLAY' , 'SILT' , 'SAND'),
tri.sum.tst        =F, # allows toplot texture fraction that do not all to 100 as in the NAPT and ALP databases
pch                =1,
#bg                 =1,
col                ="black",
cex                = 2,
lwd                = 1,
frame.bg.col       ="gray75"
)
TT.points(
geo.ALLP,
# class.sys          ="USDA-NCSS.TT",
tri.data           = NAPT,
css.names          =c('CLAY' , 'SILT' , 'SAND'),
tri.sum.tst        =F, # allows toplot texture fraction that do not all to 100 as in the NAPT and ALP databases
#main               ="NAPT Texture Data",
pch                = 24,
bg                 ="white",
col                ="black",
cex                = 1.2,
lwd                = 0.5
)
TT.points(
geo.ALLP,
tri.data           = ALLP,
css.names          =c('CLAY' , 'SILT' , 'SAND'),
tri.sum.tst        =F, # allows toplot texture fraction that do not all to 100 as in the NAPT and ALP databases
#main               ="NAPT Texture Data",
#class.p.bg.col     =T,
pch                = 25,
bg                 ="grey50",
col                ="black",
cex                = 1.2,
lwd                = 0.5
)
tiff(filename="../Manuscript/Figures/AllData.tiff", width=3840 , height=3840, pointsize = 80  )
TT.plot(
#geo.ALLP,
class.sys          ="USDA-NCSS.TT",
main               ='USDA - NCRCS Texture classification for the NAPT, ALP and selected soil samples',
tri.data           = NAPT,
css.names          =c('CLAY', 'SILT' , 'SAND'),
tri.sum.tst        =F, # allows toplot texture fraction that do not all to 100 as in the NAPT and ALP databases
#main               ="NAPT Texture Data",
pch                = 24,
bg                 ="WHITE",
col                ="BLACK",
cex                = 1.5,
lwd                = 0.5,
frame.bg.col       ="gray75"
)
TT.points(
geo.ALLP,
tri.data           = ALLP,
css.names          =c('CLAY', 'SILT' , 'SAND'),
tri.sum.tst        =F, # allows toplot texture fraction that do not all to 100 as in the NAPT and ALP databases
#class.p.bg.col     =T,
pch                = 25,
bg                 ="grey50",
col                ="black",
cex                = 1.5,
lwd                = 0.5
)
TT.points(
geo.ALLP,
tri.data           = Paper.Samples,
css.names          =c('CLAY', 'SILT' , 'SAND'),
tri.sum.tst        =F, # allows toplot texture fraction that do not all to 100 as in the NAPT and ALP databases
pch                =21,
bg                 =NA,
col                ="RED",
cex                = 2.5,
lwd                = 4
)
legend("topleft", legend = c("NAPT", "ALP", "This Study"), pch=c(24, 25, 21), col=c( 'BLACK', 'BLACK', 'RED'), pt.bg = c("white", "grey50", NA), pt.cex=c(1.5,1.5,2.5), pt.lwd=c(0.5,0.5,4))
dev.off()
TT.plot(
#geo.ALLP,
class.sys          ="USDA-NCSS.TT",
main               ='USDA - NCRCS Texture classification for the NAPT, \nALP and selected soil samples',
tri.data           = NAPT,
css.names          =c('CLAY', 'SILT' , 'SAND'),
tri.sum.tst        =F, # allows toplot texture fraction that do not all to 100 as in the NAPT and ALP databases
#main               ="NAPT Texture Data",
pch                = 24,
bg                 ="WHITE",
col                ="BLACK",
cex                = 1.5,
lwd                = 0.5,
frame.bg.col       ="gray75"
)
TT.points(
geo.ALLP,
tri.data           = ALLP,
css.names          =c('CLAY', 'SILT' , 'SAND'),
tri.sum.tst        =F, # allows toplot texture fraction that do not all to 100 as in the NAPT and ALP databases
#class.p.bg.col     =T,
pch                = 25,
bg                 ="grey50",
col                ="black",
cex                = 1.5,
lwd                = 0.5
)
TT.points(
geo.ALLP,
tri.data           = Paper.Samples,
css.names          =c('CLAY', 'SILT' , 'SAND'),
tri.sum.tst        =F, # allows toplot texture fraction that do not all to 100 as in the NAPT and ALP databases
pch                =21,
bg                 =NA,
col                ="RED",
cex                = 2.5,
lwd                = 4
)
legend("topleft", legend = c("NAPT", "ALP", "This Study"), pch=c(24, 25, 21), col=c( 'BLACK', 'BLACK', 'RED'), pt.bg = c("white", "grey50", NA), pt.cex=c(1.5,1.5,2.5), pt.lwd=c(0.5,0.5,4))
tiff(filename="../Manuscript/Figures/AllData.tiff", width=3840 , height=3840, pointsize = 80  )
TT.plot(
#geo.ALLP,
class.sys          ="USDA-NCSS.TT",
main               ='USDA - NCRCS Texture classification for the NAPT, \nALP and selected soil samples',
tri.data           = NAPT,
css.names          =c('CLAY', 'SILT' , 'SAND'),
tri.sum.tst        =F, # allows toplot texture fraction that do not all to 100 as in the NAPT and ALP databases
#main               ="NAPT Texture Data",
pch                = 24,
bg                 ="WHITE",
col                ="BLACK",
cex                = 1.5,
lwd                = 0.5,
frame.bg.col       ="gray75"
)
TT.points(
geo.ALLP,
tri.data           = ALLP,
css.names          =c('CLAY', 'SILT' , 'SAND'),
tri.sum.tst        =F, # allows toplot texture fraction that do not all to 100 as in the NAPT and ALP databases
#class.p.bg.col     =T,
pch                = 25,
bg                 ="grey50",
col                ="black",
cex                = 1.5,
lwd                = 0.5
)
TT.points(
geo.ALLP,
tri.data           = Paper.Samples,
css.names          =c('CLAY', 'SILT' , 'SAND'),
tri.sum.tst        =F, # allows toplot texture fraction that do not all to 100 as in the NAPT and ALP databases
pch                =21,
bg                 =NA,
col                ="RED",
cex                = 2.5,
lwd                = 4
)
legend("topleft", legend = c("NAPT", "ALP", "This Study"), pch=c(24, 25, 21), col=c( 'BLACK', 'BLACK', 'RED'), pt.bg = c("white", "grey50", NA), pt.cex=c(1.5,1.5,2.5), pt.lwd=c(0.5,0.5,4))
dev.off()
NAPT.data.n
mode(NAPT.data.n[,c('V1' , 'V2' , 'V3')])
table(NAPT.data.n[,c('V1' , 'V2' , 'V3')])
names(table(NAPT.data.n[,c('V1' , 'V2' , 'V3')]))
table(unlist(NAPT.data.n[,c('V1' , 'V2' , 'V3')]))
max(table(unlist(NAPT.data.n[,c('V1' , 'V2' , 'V3')])))
names(table(unlist(NAPT.data.n[,c('V1' , 'V2' , 'V3')])))
names(table(unlist(NAPT.data.n[,c('V1' , 'V2' , 'V3')])))[table(unlist(NAPT.data.n[,c('V1' , 'V2' , 'V3')]))==max(table(unlist(NAPT.data.n[,c('V1' , 'V2' , 'V3')])))]
names(table(unlist(NAPT.data.n[,c('V4' , 'V5' , 'V6')])))[table(unlist(NAPT.data.n[,c(c('V4' , 'V5' , 'V6'))]))==max(table(unlist(NAPT.data.n[,c(c('V4' , 'V5' , 'V6'))])))]
table(unlist(NAPT.data.n[,c(c('V4' , 'V5' , 'V6'))]))
head(ALLP.data)
levels(All.Data$TextureFactor)
for (i in seq(2,length(MassANDSand))) {
tiff(filename=paste0("../Manuscript/Figures/LDPArticleSizeDist_", i,".tiff"), width=3840 , height=3840, pointsize = 80  )
#initilaizing the horizontal bar plot with the first scaled LD results
barplot(height=ClayScaled.data[,i], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(1,0,0,0.5), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")))
barplot(height=SiltScaled.data[,i], width=rep(1.4,74), space=0.2, col=rgb(0,0,1,0.5), horiz = T,las=1,add=T)
dev.off()
}
##############################################################################################################
#
#
# Program to explore plotting cumulative particle size distribution from the laser diffraction analysis
#  and the Malvern Mastersizer 3000
#
# Felipe Montes 2018 06/30
#
# Uses the  package 'soiltexture' to plot the texture
# Also uses the package 'XLConnect' to read and write information from excel spreadsheets with soil samples information
#
#
###############################################################################################################
#  Tell the program where the package libraries are  #####################
.libPaths("C:/Felipe/SotwareANDCoding/R_Library/library")  ;
###### Introduction to Web Scraping #####
# Preliminaries
rm(list = ls())
# Set your working directory to some place you can find
setwd("C:/Felipe/LaserDifractionSoilTextureAnalysis/NAPTSoilsData") ;
load('NAPTTexturePlot.RData') ;
#install.packages("soiltexture")
library('soiltexture')
########################################################################################################
#
#                      Get the data from the lasser diffraction instrument for plotting
#
#########################################################################################################
library(XLConnect) ;
############################################## REad the names of the samples from the spreadsheet ######################################
LassDiff.name<-readWorksheetFromFile("../Manuscript/USDA Standards_PSA_Mastersizer_Felipe_20180824.xlsx", sheet="correct (6) fraction",startRow=2, endRow=2, header=F) ;
# Use the LassDiff.name to get the name of the samples selected in the apropriate format to compare with other sample selection
LDRunSamples.all<-sapply(strsplit(sapply(strsplit(names(LassDiff.1)," "), "[",2), "-5"), '[',1) ;
LDRunSamples.Not_NA<-LDRunSamples.all[!is.na(LDRunSamples)] [1:51];
LDRunSamples<-data.frame(LDRunSamples.Not_NA,c("Pipette"),c("Hydrometer"))  ;
match(LDRunSamples[,1:2],NAPT[,c("SAMPLE", "ANALYSIS")])
LassDiff.name<-readWorksheetFromFile("../Manuscript/USDA Standards_PSA_Mastersizer_Felipe_20180824.xlsx", sheet="correct (6) fraction",startRow=2, endRow=2, header=F) ;
LDRunSamples.all<-sapply(strsplit(sapply(strsplit(names(LassDiff.name)," "), "[",2), "-5"), '[',1) ;
LDRunSamples.Not_NA<-LDRunSamples.all[!is.na(LDRunSamples)] [1:51];
LDRunSamples.all<-sapply(strsplit(sapply(strsplit(names(LassDiff.name)," "), "[",2), "-5"), '[',1) ;
LDRunSamples.Not_NA<-LDRunSamples.all[!is.na(LDRunSamples.all)] [1:51];
LDRunSamples<-data.frame(LDRunSamples.Not_NA,c("Pipette"),c("Hydrometer"))  ;
match(LDRunSamples[,1:2],NAPT[,c("SAMPLE", "ANALYSIS")])
NAPT
match(LDRunSamples[,1:2],NAPT.all[,c("SAMPLE", "ANALYSIS")])
LDRunSamples
LDRunSamples.all
LassDiff.name
sapply(strsplit(sapply(strsplit(names(LassDiff.name)," "), "[",2), "-5"), '[',1)
strsplit(names(LassDiff.name)," ")
LassDiff.1<-readWorksheetFromFile("../Manuscript/USDA Standards_PSA_Mastersizer_Felipe_20180824.xlsx", sheet="correct (6) fraction",startRow=5, endRow=104, header=F) ;
head(LassDiff.1)
LassDiff.name<-readWorksheetFromFile("../Manuscript/USDA Standards_PSA_Mastersizer_Felipe_20180824.xlsx", sheet="correct (6) fraction",startRow=2, endRow=2, header=F) ;
LassDiff.name
strsplit(LassDiff.name," ")
LassDiff.name
strsplit(LassDiff.name," ")
LassDiff.name
str(LassDiff.name)
strsplit(LassDiff.name[1,]," ")
strsplit(LassDiff.name[1,], "-")
LassDiff.name[1,]
str(LassDiff.name[1,])
LassDiff.name[1,1:51]
strsplit(LassDiff.name[1,1:51], "-")
unlist(LassDiff.name[1,1:51])
str(unlist(LassDiff.name[1,1:51]))
strsplit(unlist(LassDiff.name[1,1:51]), "-")
strsplit(unlist(LassDiff.name[1,1:51]), " ")
sapply(strsplit(sapply(strsplit(unlist(LassDiff.name[1,1:51]), " "), "[",2), "-5"), '[',1)
LDRunSamples.all<-sapply(strsplit(sapply(strsplit(unlist(LassDiff.name[1,1:51]), " "), "[",2), "-5"), '[',1) ;
LDRunSamples.Not_NA<-LDRunSamples.all[!is.na(LDRunSamples.all)] [1:51];
LDRunSamples.all[!is.na(LDRunSamples.all)]
LDRunSamples.all[!is.na(LDRunSamples.all)] [1:51]
LDRunSamples<-data.frame(LDRunSamples.Not_NA,c("Pipette"),c("Hydrometer"))  ;
match(LDRunSamples[,1:2],NAPT.all[,c("SAMPLE", "ANALYSIS")])
LDRunSamples
NAPT.all[,c("SAMPLE", "ANALYSIS")]
match(LDRunSamples[,1:3],NAPT.all[,c("SAMPLE", "ANALYSIS")])
LassDiff.1<-readWorksheetFromFile("../Manuscript/USDA Standards_PSA_Mastersizer_Felipe_20180824.xlsx", sheet="correct (6) fraction",startRow=5, endRow=104, header=F) ;
names(LassDiff.1)<-c('Row','Size', 'nothing' ,sapply(strsplit(as.character(LassDiff.name[1,]),"/"),"[", 1))
head(LassDiff.1)
tail(LassDiff.1)
MassANDSand<-readWorksheetFromFile("../Manuscript/USDA Standards_PSA_Mastersizer_Felipe_20180824.xlsx", sheet="correct (6) fraction",startRow=111, endRow=112, startCol=4, header=F) ;
head(MassANDSand)
barplot(LassDiff.1[,4],names.arg =LassDiff.1[,2], horiz = F)
cumsum(LassDiff.1[1:74,4])
barplot(cumsum(LassDiff.1[1:74,4]),names.arg =LassDiff.1[1:74,2], horiz = T, xlim=c(0,100))
head(LassDiff.1)
LassDiff.1[1:51,c(2,4)]
LassDiff.1[52:74,c(2,4)]
max(LassDiff.1[52:74,c(2,5)])
barplot(height=LassDiff.1[1:74,4],width=rep(1,74), names.arg=LassDiff.1[1:74,2], col=NA, border=gray(0.5), horiz = T, ylim=c(0.01,100), xlim=c(0,5))
barplot(height=LassDiff.1[1:74,4],width=rep(1,74), names.arg=LassDiff.1[1:74,2],beside=T, col=gray(0.3,alpha=0.5), horiz = T, ylim=c(0.01,100), xlim=c(0,max(LassDiff.1[52:74,c(2,3)])),add=T)
barplot(as.matrix(LassDiff.1[1:74,5]), beside=T,add=T, col=rgb(1,0,1, alpha=0.5) , horiz = T)
barplot(height=LassDiff.1[1:74,4],width=diff(LassDiff.1[1:74,2],differences = 1), names.arg=LassDiff.1[1:74,2],beside=T, col=rgb(0,0,1, alpha=0.5), horiz = T, ylim=c(0.01,100), xlim=c(0,max(LassDiff.1[52:74,c(2,4)])))
barplot(height=LassDiff.1[1:74,4],width=diff(LassDiff.1[1:74,2],differences = 1), names.arg=LassDiff.1[1:74,2],beside=T, col=rgb(1,0,0, alpha=0.5), horiz = T, ylim=c(0.01,100), xlim=c(0,max(LassDiff.1[52:74,c(2,3)])),add=T)
barplot(as.matrix(LassDiff.1[1:74,5]),beside=T,add=T, col=rgb(1,0,1, alpha=0.5) , horiz = T)
diff(LassDiff.1[1:74,2],differences = 1)
length(MassANDSand)
head(MassANDSand)
ScalingFactor<-(1-(MassANDSand[2,1:length(MassANDSand)]/MassANDSand[1,1:length(MassANDSand)]))  ;
head(MassANDSand)
barplot(LassDiff.1[,4],names.arg =LassDiff.1[,2], horiz = F)
cumsum(LassDiff.1[1:74,4])
barplot(cumsum(LassDiff.1[1:74,4]),names.arg =LassDiff.1[1:74,2], horiz = T, xlim=c(0,100))
head(LassDiff.1)
LassDiff.1[1:51,c(2,4)]
LassDiff.1[52:74,c(2,4)]
max(LassDiff.1[52:74,c(2,5)])
barplot(height=LassDiff.1[1:74,4],width=rep(1,74), names.arg=LassDiff.1[1:74,2], col=NA, border=gray(0.5), horiz = T, ylim=c(0.01,100), xlim=c(0,5))
barplot(height=LassDiff.1[1:74,4],width=rep(1,74), names.arg=LassDiff.1[1:74,2],beside=T, col=gray(0.3,alpha=0.5), horiz = T, ylim=c(0.01,100), xlim=c(0,max(LassDiff.1[52:74,c(2,3)])),add=T)
barplot(as.matrix(LassDiff.1[1:74,5]), beside=T,add=T, col=rgb(1,0,1, alpha=0.5) , horiz = T)
barplot(height=LassDiff.1[1:74,4],width=diff(LassDiff.1[1:74,2],differences = 1), names.arg=LassDiff.1[1:74,2],beside=T, col=rgb(0,0,1, alpha=0.5), horiz = T, ylim=c(0.01,100), xlim=c(0,max(LassDiff.1[52:74,c(2,4)])))
length(MassANDSand)
head(MassANDSand)
ScalingFactor<-(1-(MassANDSand[2,1:length(MassANDSand)]/MassANDSand[1,1:length(MassANDSand)]))  ;
is.na(ScalingFactor)
ScalingFactor.Not_NA<-ScalingFactor[!is.na(ScalingFactor)]
ScaledLD.data<-data.frame(LassDiff.1[1:74,2],as.matrix(LassDiff.1[1:74,seq(4,length(MassANDSand)-1)]) %*% diag(ScalingFactor.Not_NA/100));
names(ScaledLD.data)<-c('Size',LassDiff.name[1:51])
head(ScaledLD.data)
names(ScaledLD.data)
# creating an adequate size labels numbering for the bar plot
SizeLabels<-c(as.character(signif(ScaledLD.data[1:18,1],2)), as.character(signif(ScaledLD.data[19:38,1],2)), as.character(signif(ScaledLD.data[39:55,1],2)), as.character(signif(ScaledLD.data[56:74,1],2)))  ;
i=2
for (i in seq(2,length(MassANDSand))) {
tiff(filename=paste0("../Manuscript/Figures/LDPArticleSizeDist_", i,".tiff"), width=3840 , height=3840, pointsize = 80  )
#initilaizing the horizontal bar plot with the first scaled LD results
barplot(height=ClayScaled.data[,i], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(1,0,0,0.5), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")))
barplot(height=SiltScaled.data[,i], width=rep(1.4,74), space=0.2, col=rgb(0,0,1,0.5), horiz = T,las=1,add=T)
dev.off()
}
MassANDSand
names(ScaledLD.data)<-c('Size',LassDiff.name[1:51])
head(ScaledLD.data)
names(ScaledLD.data)
# creating an adequate size labels numbering for the bar plot
SizeLabels<-c(as.character(signif(ScaledLD.data[1:18,1],2)), as.character(signif(ScaledLD.data[19:38,1],2)), as.character(signif(ScaledLD.data[39:55,1],2)), as.character(signif(ScaledLD.data[56:74,1],2)))  ;
SizeLabels
seq(2,length(MassANDSand)
)
barplot(height=ClayScaled.data[,i], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(1,0,0,0.5), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")))
barplot(height=ScaledLD.data[,40], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(0,0,1,1), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")))
barplot(height=ScaledLD.data[,21], width=rep(1.4,74), space=0.2, col=rgb(1,1,1,0.5), horiz = T,las=1,add=T)
legend("bottomright", legend = c('2017-113', '2011-118'), pch=c( 22, 22), pt.bg = c(rgb(0,0,1,1) , rgb(1,1,1,0.5) ), pt.lwd=3)
barplot(height=ScaledLD.data[,40], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(0,0,1,1), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")))
barplot(height=ScaledLD.data[,21], width=rep(1.4,74), space=0.2, col=rgb(1,1,1,0.5), horiz = T,las=1,add=T)
legend("bottomright", legend = c('2017-113', '2011-118'), pch=c( 22, 22), pt.bg = c(rgb(0,0,1,1) , rgb(1,1,1,0.5) ), pt.lwd=3)
text(2.5,112, "SILT", col="black")
text(2.5,40, "CLAY", col="black")
abline(h=91,lty=2, col=rgb(1,0,0,1), lwd=10)
barplot(height=ScaledLD.data[,2], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(0,1,0,0.5), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")))
dev.off()
barplot(height=ScaledLD.data[,40], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(0,0,1,1), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")))
ScaledLD.data
head(ScaledLD.data)
head(ScaledLD.data)
barplot(height=ScaledLD.data[,i], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(1,0,0,0.5), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")))
for (i in seq(2,length(MassANDSand))) {
tiff(filename=paste0("../Manuscript/Figures/LDPArticleSizeDist_", i,".tiff"), width=3840 , height=3840, pointsize = 80  )
#initilaizing the horizontal bar plot with the first scaled LD results
barplot(height=ScaledLD.data[,i], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(1,0,0,0.5), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")))
dev.off()
}
barplot(height=ScaledLD.data[,40], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(0,0,1,1), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")))
barplot(height=ScaledLD.data[,21], width=rep(1.4,74), space=0.2, col=rgb(1,1,1,0.5), horiz = T,las=1,add=T)
legend("bottomright", legend = c('2017-113', '2011-118'), pch=c( 22, 22), pt.bg = c(rgb(0,0,1,1) , rgb(1,1,1,0.5) ), pt.lwd=3)
text(2.5,112, "SILT", col="black")
text(2.5,40, "CLAY", col="black")
abline(h=91,lty=2, col=rgb(1,0,0,1), lwd=10)
dev.off()
barplot(height=ScaledLD.data[,40], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(0,0,1,1), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")))
barplot(height=ScaledLD.data[,21], width=rep(1.4,74), space=0.2, col=rgb(1,1,1,0.5), horiz = T,las=1,add=T)
legend("bottomright", legend = c('2017-113', '2011-118'), pch=c( 22, 22), pt.bg = c(rgb(0,0,1,1) , rgb(1,1,1,0.5) ), pt.lwd=3)
text(2.5,112, "SILT", col="black")
text(2.5,40, "CLAY", col="black")
abline(h=91,lty=2, col=rgb(1,0,0,1), lwd=10)
barplot(height=ScaledLD.data[,2], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(0,1,0,0.5), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")))
barplot(height=ScaledLD.data[,47], width=rep(1.4,74), space=0.2, col=rgb(1,1,0,0.5), horiz = T,las=1,add=T)
legend("bottomright", legend = c('2011-119','2012-103'), pch=c( 22, 22), pt.bg = c(rgb(0,1,0,0.5), rgb(1,1,0,0.5)), pt.lwd=3)
text(2.2,113, "SILT", col="black")
text(2.2,40, "CLAY", col="black")
abline(h=91,lty=2, col=rgb(1,0,0,1), lwd=10)
barplot(height=ScaledLD.data[,i], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(1,0,0,0.5), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")))
dev.off()
barplot(height=ScaledLD.data[,i], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(1,0,0,0.5), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")))
dev.off()
barplot(height=ScaledLD.data[,i], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(1,0,0,0.5), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")))
i=2
barplot(height=ScaledLD.data[,i], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(1,0,0,0.5), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")))
abline(h=91,lty=2, col=rgb(1,0,0,1), lwd=10)
abline(h=81,lty=2, col=rgb(1,0,0,1), lwd=10)
abline(h=85,lty=2, col=rgb(1,0,0,1), lwd=10)
text(0.01,112, "SILT", col="black")
text(0.01,40, "CLAY", col="black")
text(0.01,122, "SILT", col="black")
text(0.01,115, "SILT", col="black")
text(0.01,118, "SILT", col="black")
text(0.01,118, "SILT", col="black")
text(0.01,116, "SILT", col="black")
barplot(height=ScaledLD.data[,i], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(1,0,0,0.5), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")))
abline(h=85,lty=2, col=rgb(1,0,0,1), lwd=10)
text(0.01,116, "SILT", col="black")
text(0.01,40, "CLAY", col="black")
text(0.01,110, "SILT", col="black")
text(0.01,111, "SILT", col="black")
text(0.01,112, "SILT", col="black")
text(0.01,113, "SILT", col="black")
text(0.01,114, "SILT", col="black")
for (i in seq(2,length(MassANDSand))) {
tiff(filename=paste0("../Manuscript/Figures/LDPArticleSizeDist_", i,".tiff"), width=3840 , height=3840, pointsize = 80  )
#initilaizing the horizontal bar plot with the first scaled LD results
barplot(height=ScaledLD.data[,i], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(1,0,0,0.5), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")))
abline(h=85,lty=2, col=rgb(1,0,0,1), lwd=10)
text(0.01,40, "CLAY", col="black")
dev.off()
}
head(MassANDSand)
MassANDSand<-readWorksheetFromFile("../Manuscript/USDA Standards_PSA_Mastersizer_Felipe_20180824.xlsx", sheet="correct (6) fraction",startRow=111, endRow=112, startCol=4, header=F) ;
head(MassANDSand)
LassDiff.1<-readWorksheetFromFile("../Manuscript/USDA Standards_PSA_Mastersizer_Felipe_20180824.xlsx", sheet="correct (6) fraction",startRow=5, endRow=104, header=F) ;
names(LassDiff.1)<-c('Row','Size', 'nothing' ,sapply(strsplit(as.character(LassDiff.name[1,]),"/"),"[", 1))
head(LassDiff.1)
View(LassDiff.1)
View(LassDiff.1)
Texture_C
barplot(height=ScaledLD.data[,40], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(0,0,1,1), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")))
barplot(height=ScaledLD.data[,21], width=rep(1.4,74), space=0.2, col=rgb(1,1,1,0.5), horiz = T,las=1,add=T)
legend("bottomright", legend = c('2017-113', '2011-118'), pch=c( 22, 22), pt.bg = c(rgb(0,0,1,1) , rgb(1,1,1,0.5) ), pt.lwd=3)
text(2.5,112, "SILT", col="black")
text(2.5,40, "CLAY", col="black")
abline(h=91,lty=2, col=rgb(1,0,0,1), lwd=10)
dev.off()
barplot(height=ScaledLD.data[,40], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(0,0,1,1), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")))
barplot(height=ScaledLD.data[,21], width=rep(1.4,74), space=0.2, col=rgb(1,1,1,0.5), horiz = T,las=1,add=T)
legend("bottomright", legend = c('2017-113', '2011-118'), pch=c( 22, 22), pt.bg = c(rgb(0,0,1,1) , rgb(1,1,1,0.5) ), pt.lwd=3)
text(2.5,112, "SILT", col="black")
text(2.5,40, "CLAY", col="black")
abline(h=91,lty=2, col=rgb(1,0,0,1), lwd=10)
dev.off()
barplot(height=ScaledLD.data[,19], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(0,0,0,0.8), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=0.5,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")), xlim=c(0,3.0))
barplot(height=ScaledLD.data[,18], width=rep(1.4,74), space=0.2, col=rgb(0,1,0,0.6), horiz = T,las=1,add=T)
barplot(height=ScaledLD.data[,21], width=rep(1.4,74), space=0.2, col=rgb(0,0,1,0.7), horiz = T,las=1,add=T)
barplot(height=ScaledLD.data[,19], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(0,0,0,0.8), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=0.5,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")), xlim=c(0,3.0))
barplot( height=t(ScaledLD.data[,c(18,19,21)]), beside=T, col= c('GREEN','BLACK','BLUE'), names.arg=SizeLabels[seq(1,74)], axisnames= F, ylim=c(0,0.035), cex.names =0.5, cex.axis=0.5, cex.lab= 0.7, ylab="Particle Size Fraction", xlab=NA, space=c(0,0.1),las=2)
barplot( height=t(ScaledLD.data[,c(9,13,16)]), beside=T, col= c('BLACK','BLUE','GREEN'), names.arg=SizeLabels[seq(1,74)], ylim=c(0,0.035), cex.names =0.5, cex.axis=0.5, cex.lab= 0.7, ylab="Particle Size Fraction", xlab=expression(paste("Equivalent particle size ( ", mu, "m)")), space=c(0,0.1),las=2)
barplot( height=t(ScaledLD.data[,c(14,13,16)]), beside=T, col= c('BLACK','BLUE','GREEN'), names.arg=SizeLabels[seq(1,74)], ylim=c(0,0.035), cex.names =0.5, cex.axis=0.5, cex.lab= 0.7, ylab="Particle Size Fraction", xlab=expression(paste("Equivalent particle size ( ", mu, "m)")), space=c(0,0.1),las=2)
barplot( height=t(ScaledLD.data[,c(14,15,16)]), beside=T, col= c('BLACK','BLUE','GREEN'), names.arg=SizeLabels[seq(1,74)], ylim=c(0,0.035), cex.names =0.5, cex.axis=0.5, cex.lab= 0.7, ylab="Particle Size Fraction", xlab=expression(paste("Equivalent particle size ( ", mu, "m)")), space=c(0,0.1),las=2)
barplot( height=t(ScaledLD.data[,c(13,15,16)]), beside=T, col= c('BLACK','BLUE','GREEN'), names.arg=SizeLabels[seq(1,74)], ylim=c(0,0.035), cex.names =0.5, cex.axis=0.5, cex.lab= 0.7, ylab="Particle Size Fraction", xlab=expression(paste("Equivalent particle size ( ", mu, "m)")), space=c(0,0.1),las=2)
barplot( height=t(ScaledLD.data[,c(14,15,16)]), beside=T, col= c('BLACK','BLUE','GREEN'), names.arg=SizeLabels[seq(1,74)], ylim=c(0,0.035), cex.names =0.5, cex.axis=0.5, cex.lab= 0.7, ylab="Particle Size Fraction", xlab=expression(paste("Equivalent particle size ( ", mu, "m)")), space=c(0,0.1),las=2)
barplot( height=t(ScaledLD.data[,c(9,15,16)]), beside=T, col= c('BLACK','BLUE','GREEN'), names.arg=SizeLabels[seq(1,74)], ylim=c(0,0.035), cex.names =0.5, cex.axis=0.5, cex.lab= 0.7, ylab="Particle Size Fraction", xlab=expression(paste("Equivalent particle size ( ", mu, "m)")), space=c(0,0.1),las=2)
barplot( height=t(ScaledLD.data[,c(19,15,16)]), beside=T, col= c('BLACK','BLUE','GREEN'), names.arg=SizeLabels[seq(1,74)], ylim=c(0,0.035), cex.names =0.5, cex.axis=0.5, cex.lab= 0.7, ylab="Particle Size Fraction", xlab=expression(paste("Equivalent particle size ( ", mu, "m)")), space=c(0,0.1),las=2)
barplot( height=t(ScaledLD.data[,c(20,15,16)]), beside=T, col= c('BLACK','BLUE','GREEN'), names.arg=SizeLabels[seq(1,74)], ylim=c(0,0.035), cex.names =0.5, cex.axis=0.5, cex.lab= 0.7, ylab="Particle Size Fraction", xlab=expression(paste("Equivalent particle size ( ", mu, "m)")), space=c(0,0.1),las=2)
barplot( height=t(ScaledLD.data[,c(22,15,16)]), beside=T, col= c('BLACK','BLUE','GREEN'), names.arg=SizeLabels[seq(1,74)], ylim=c(0,0.035), cex.names =0.5, cex.axis=0.5, cex.lab= 0.7, ylab="Particle Size Fraction", xlab=expression(paste("Equivalent particle size ( ", mu, "m)")), space=c(0,0.1),las=2)
barplot( height=t(ScaledLD.data[,c(24,15,16)]), beside=T, col= c('BLACK','BLUE','GREEN'), names.arg=SizeLabels[seq(1,74)], ylim=c(0,0.035), cex.names =0.5, cex.axis=0.5, cex.lab= 0.7, ylab="Particle Size Fraction", xlab=expression(paste("Equivalent particle size ( ", mu, "m)")), space=c(0,0.1),las=2)
barplot( height=t(ScaledLD.data[,c(20,15,24)]), beside=T, col= c('BLACK','BLUE','GREEN'), names.arg=SizeLabels[seq(1,74)], ylim=c(0,0.035), cex.names =0.5, cex.axis=0.5, cex.lab= 0.7, ylab="Particle Size Fraction", xlab=expression(paste("Equivalent particle size ( ", mu, "m)")), space=c(0,0.1),las=2)
barplot( height=t(ScaledLD.data[,c(24,15,27)]), beside=T, col= c('BLACK','BLUE','GREEN'), names.arg=SizeLabels[seq(1,74)], ylim=c(0,0.035), cex.names =0.5, cex.axis=0.5, cex.lab= 0.7, ylab="Particle Size Fraction", xlab=expression(paste("Equivalent particle size ( ", mu, "m)")), space=c(0,0.1),las=2)
barplot( height=t(ScaledLD.data[,c(24,15,16)]), beside=T, col= c('BLACK','BLUE','GREEN'), names.arg=SizeLabels[seq(1,74)], ylim=c(0,0.035), cex.names =0.5, cex.axis=0.5, cex.lab= 0.7, ylab="Particle Size Fraction", xlab=expression(paste("Equivalent particle size ( ", mu, "m)")), space=c(0,0.1),las=2)
barplot( height=t(ScaledLD.data[,c(24,15,27)]), beside=T, col= c('BLACK','BLUE','GREEN'), names.arg=SizeLabels[seq(1,74)], ylim=c(0,0.035), cex.names =0.5, cex.axis=0.5, cex.lab= 0.7, ylab="Particle Size Fraction", xlab=expression(paste("Equivalent particle size ( ", mu, "m)")), space=c(0,0.1),las=2)
barplot( height=t(ScaledLD.data[,c(20,15,24)]), beside=T, col= c('BLACK','BLUE','GREEN'), names.arg=SizeLabels[seq(1,74)], ylim=c(0,0.035), cex.names =0.5, cex.axis=0.5, cex.lab= 0.7, ylab="Particle Size Fraction", xlab=expression(paste("Equivalent particle size ( ", mu, "m)")), space=c(0,0.1),las=2)
barplot( height=t(ScaledLD.data[,c(24,15,34)]), beside=T, col= c('BLACK','BLUE','GREEN'), names.arg=SizeLabels[seq(1,74)], ylim=c(0,0.035), cex.names =0.5, cex.axis=0.5, cex.lab= 0.7, ylab="Particle Size Fraction", xlab=expression(paste("Equivalent particle size ( ", mu, "m)")), space=c(0,0.1),las=2)
barplot( height=t(ScaledLD.data[,c(20,15,24)]), beside=T, col= c('BLACK','BLUE','GREEN'), names.arg=SizeLabels[seq(1,74)], ylim=c(0,0.035), cex.names =0.5, cex.axis=0.5, cex.lab= 0.7, ylab="Particle Size Fraction", xlab=expression(paste("Equivalent particle size ( ", mu, "m)")), space=c(0,0.1),las=2)
barplot( height=t(ScaledLD.data[,c(24,15,34)]), beside=T, col= c('BLACK','BLUE','GREEN'), names.arg=SizeLabels[seq(1,74)], ylim=c(0,0.035), cex.names =0.5, cex.axis=0.5, cex.lab= 0.7, ylab="Particle Size Fraction", xlab=expression(paste("Equivalent particle size ( ", mu, "m)")), space=c(0,0.1),las=2)
barplot( height=t(ScaledLD.data[,c(20,15,24)]), beside=T, col= c('BLACK','BLUE','GREEN'), names.arg=SizeLabels[seq(1,74)], ylim=c(0,0.035), cex.names =0.5, cex.axis=0.5, cex.lab= 0.7, ylab="Particle Size Fraction", xlab=expression(paste("Equivalent particle size ( ", mu, "m)")), space=c(0,0.1),las=2)
barplot( height=t(ScaledLD.data[,c(27,15,34)]), beside=T, col= c('BLACK','BLUE','GREEN'), names.arg=SizeLabels[seq(1,74)], ylim=c(0,0.035), cex.names =0.5, cex.axis=0.5, cex.lab= 0.7, ylab="Particle Size Fraction", xlab=expression(paste("Equivalent particle size ( ", mu, "m)")), space=c(0,0.1),las=2)
barplot( height=t(ScaledLD.data[,c(20,15,24)]), beside=T, col= c('BLACK','BLUE','GREEN'), names.arg=SizeLabels[seq(1,74)], ylim=c(0,0.035), cex.names =0.5, cex.axis=0.5, cex.lab= 0.7, ylab="Particle Size Fraction", xlab=expression(paste("Equivalent particle size ( ", mu, "m)")), space=c(0,0.1),las=2)
head(ScaledLD.data)
head(ScaledLD.data)
names(ScaledLD.data)
barplot( height=t(ScaledLD.data[,c(13,14,16)]), beside=T, col= c('BLACK','BLUE','GREEN'), names.arg=SizeLabels[seq(1,74)], ylim=c(0,0.035), cex.names =0.5, cex.axis=0.5, cex.lab= 0.7, ylab="Particle Size Fraction", xlab=expression(paste("Equivalent particle size ( ", mu, "m)")), space=c(0,0.1),las=2)
barplot( height=t(ScaledLD.data[,c(13,14,24)]), beside=T, col= c('BLACK','BLUE','GREEN'), names.arg=SizeLabels[seq(1,74)], ylim=c(0,0.035), cex.names =0.5, cex.axis=0.5, cex.lab= 0.7, ylab="Particle Size Fraction", xlab=expression(paste("Equivalent particle size ( ", mu, "m)")), space=c(0,0.1),las=2)
barplot( height=t(ScaledLD.data[,c(20,15,34)]), beside=T, col= c('BLACK','BLUE','GREEN'), names.arg=SizeLabels[seq(1,74)], ylim=c(0,0.035), cex.names =0.5, cex.axis=0.5, cex.lab= 0.7, ylab="Particle Size Fraction", xlab=expression(paste("Equivalent particle size ( ", mu, "m)")), space=c(0,0.1),las=2)
barplot( height=t(ScaledLD.data[,c(20,15,27)]), beside=T, col= c('BLACK','BLUE','GREEN'), names.arg=SizeLabels[seq(1,74)], ylim=c(0,0.035), cex.names =0.5, cex.axis=0.5, cex.lab= 0.7, ylab="Particle Size Fraction", xlab=expression(paste("Equivalent particle size ( ", mu, "m)")), space=c(0,0.1),las=2)
barplot( height=t(ScaledLD.data[,c(20,15,22)]), beside=T, col= c('BLACK','BLUE','GREEN'), names.arg=SizeLabels[seq(1,74)], ylim=c(0,0.035), cex.names =0.5, cex.axis=0.5, cex.lab= 0.7, ylab="Particle Size Fraction", xlab=expression(paste("Equivalent particle size ( ", mu, "m)")), space=c(0,0.1),las=2)
barplot( height=t(ScaledLD.data[,c(20,15,25)]), beside=T, col= c('BLACK','BLUE','GREEN'), names.arg=SizeLabels[seq(1,74)], ylim=c(0,0.035), cex.names =0.5, cex.axis=0.5, cex.lab= 0.7, ylab="Particle Size Fraction", xlab=expression(paste("Equivalent particle size ( ", mu, "m)")), space=c(0,0.1),las=2)
barplot( height=t(ScaledLD.data[,c(13,14,24)]), beside=T, col= c('BLACK','BLUE','GREEN'), names.arg=SizeLabels[seq(1,74)], ylim=c(0,0.035), cex.names =0.5, cex.axis=0.5, cex.lab= 0.7, ylab="Particle Size Fraction", xlab=expression(paste("Equivalent particle size ( ", mu, "m)")), space=c(0,0.1),las=2)
barplot( height=t(ScaledLD.data[,c(13,16,24)]), beside=T, col= c('BLACK','BLUE','GREEN'), names.arg=SizeLabels[seq(1,74)], ylim=c(0,0.035), cex.names =0.5, cex.axis=0.5, cex.lab= 0.7, ylab="Particle Size Fraction", xlab=expression(paste("Equivalent particle size ( ", mu, "m)")), space=c(0,0.1),las=2)
