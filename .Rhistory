g.River.3.sub-subgraph.edges(g.River.3,eids=which(E(g.River.3)$Elev.Dif < 0 ));
g.River.3.sub.data<-as_long_data_frame(g.River.3.sub) ;
tkplot(g.River.3.sub,canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.label=g.River.3.sub.data$Point.ID.x, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.sub.data$Elev.Dif,3),edge.label.cex=1) ;
g.River.3<-graph.data.frame(g.River.3.edges, vertices=g.River.2.vertices, directed = T) ;
V(g.River.3)[is.na(Point.ID)]$color='Blue'
V(g.River.3)[!is.na(Point.ID)]$color='Red'
edge_attr(g.River.3, 'Elev.Dif'))
tkplot(g.River.3, canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5, vertex.label=g.River.2.vertices$Index, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.edges$Elev.Dif,2), edge.label.cex=1)  ;
tkplot(graph.data.frame(g.River.3.edges[g.River.3.edges$Elev.Dif<0,]),canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5,vertex.label=g.River.2.vertices$Index, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.edges$Elev.Dif,2), edge.label.cex=1)
g.River.3.sub-subgraph.edges(g.River.3,eids=which(E(g.River.3)$Elev.Dif < 0 ));
g.River.3.sub.data<-as_long_data_frame(g.River.3.sub) ;
tkplot(g.River.3.sub,canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.label=g.River.3.sub.data$Point.ID.x, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.sub.data$Elev.Dif,3),edge.label.cex=1) ;
g.River.3.sub-subgraph.edges(g.River.3,eids=which(E(g.River.3)$Elev.Dif < 0 ));
g.River.3.sub.data<-as_long_data_frame(g.River.3.sub) ;
g.River.3.sub.data
.libPaths("C:/Felipe/SotwareANDCoding/R_Library/library")  ;
Project<-"MergeVectorLayer000_q25_a100000" ;
library(devtools)  ;
install.packages("sand") ;
install.packages("sand")
library(sand)
load(paste0('C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_R_Scripts\\MM_PIHM_inputs\\',Project,'\\MM_PHIMInputsR_V2.RData'));
##### Add the river nodes from the  river mesh#########################
library(sp) ;
library(rgdal) ;
MergedRiver.info<-ogrInfo('C:/Aun Trabajo en Proceso/HansYostDeepCreek/Mar0820181045/Stream8000_sln32_dens150m_xln_Decomp.shp');
MergedRiver.info$nrows
MergedRiver<-readOGR('C:/Aun Trabajo en Proceso/HansYostDeepCreek/Mar0820181045/Stream8000_sln32_dens150m_xln_Decomp.shp');
str(MergedRiver, max.level = 2)  ;
sapply(slot(MergedRiver,"lines"), function(x) slot(x,"ID"))
coordinates(MergedRiver)[[1]]
lapply(coordinates(MergedRiver),function(x) x[[1]])
sapply(coordinates(MergedRiver),function(x) x[[1]])
MergedRiver.coords.matrix<-matrix(data=sapply(coordinates(MergedRiver),function(x) x[[1]]), nrow = MergedRiver.info$nrows, ncol = 4, byrow=T) ;
MergedRiver.coords.df<-data.frame(MergedRiver.coords.matrix[,c(1,3)],MergedRiver.coords.matrix[,c(2,4)]);
names(MergedRiver.coords.df)<-c('P1.X', 'P1.Y', 'P2.X', 'P2.Y') ;
MergedRiver.coords.df$Line.ID<-as.character(seq(1:MergedRiver.info$nrows)) ;
MergedRiver.Stacked.Point.coords<-rbind(MergedRiver.coords.matrix[,c(1,3)],MergedRiver.coords.matrix[,c(2,4)])   ;
head(MergedRiver.Stacked.Point.coords) ;
str(MergedRiver.Stacked.Point.coords) ;
MergedRiver.Unique.Point.coords<-data.frame(unique(MergedRiver.Stacked.Point.coords))  ;
names(MergedRiver.Unique.Point.coords)<-c("X" , "Y");
MergedRiver.Unique.Point.coords$Point.ID<-seq(1:dim(MergedRiver.Unique.Point.coords)[1]) ;
head(MergedRiver.Unique.Point.coords) ;
str(MergedRiver.Unique.Point.coords)  ;
MergedRiver.From.points<-merge(MergedRiver.coords.df[,c("P1.X", "P1.Y" ,  "Line.ID")], MergedRiver.Unique.Point.coords, by.x=c('P1.X', 'P1.Y'), by.y=c("X" , "Y"), all.x=T);
head(MergedRiver.From.points) ;
str(MergedRiver.From.points) ;
MergedRiver.To.points<-merge(MergedRiver.coords.df[,c("P2.X", "P2.Y" ,  "Line.ID")], MergedRiver.Unique.Point.coords, by.x=c('P2.X', 'P2.Y'), by.y=c("X" , "Y"), all.x=T);
head(MergedRiver.To.points)
str(MergedRiver.To.points)
MergedRiver.Line.Point<-merge(MergedRiver.From.points,MergedRiver.To.points,by="Line.ID");
head(MergedRiver.Line.Point)
str(MergedRiver.Line.Point)
head(MergedRiver.Unique.Point.coords) ;
str(MergedRiver.Unique.Point.coords);
head(River.Nodes.Elevation) ;
str(River.Nodes.Elevation) ;
Refined.Merged.Nodes<-merge(River.Nodes.Elevation, MergedRiver.Unique.Point.coords, by=c('X', 'Y'),all.x=T) ;
head(Refined.Merged.Nodes)
str(Refined.Merged.Nodes)
summary(Refined.Merged.Nodes)
g.River.2.edges<-MergedRiver.Line.Point[,c("Point.ID.x", "Point.ID.y" , "Line.ID") ] ;
g.River.2.edges<-g.River.2.edges[order(g.River.2.edges$Line.ID),] ;
head(g.River.2.edges,20)
g.River.2.vertices<-Refined.Merged.Nodes[, c('Index', 'X', 'Y','Zmax', 'Point.ID') ] ;
head(g.River.2.vertices)
g.River.2<-graph.data.frame(g.River.2.edges, vertices=g.River.2.vertices, directed = T) ;
str(g.River.2);
plot(g.River.2, layout=layout_nicely,vertex.size= 1, edge.arrow.size=0.1, vertex.label=NA)
tkplot(g.River.2, canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.1, vertex.label=NA)
is.simple(g.River.2)
E(graph.data.frame)
degree(g.River.2, mode="in")
which(degree(g.River.2) == 0)
degree(g.River.2, mode="out")
which(degree(g.River.2, mode="out") == 2)
V(g.River.2)[is.na(Point.ID)]$color='Blue'
V(g.River.2)[!is.na(Point.ID)]$color='Red'
tkplot(g.River.2, canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.1, vertex.label=g.River.2.vertices$Index, vertex.label.cex=1, vertex.label.dist=1)   ;
tkplot(g.River.2, canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5, vertex.label=paste(g.River.2.vertices$Index,round(g.River.2.vertices$Zmax,2),sep="-"), vertex.label.cex=1, vertex.label.dist=1) ;
g.River.sub<-induced.subgraph(g.River.2,seq(1,30)) ;
V(g.River.sub)[is.na(Point.ID)]$color='Blue'
V(g.River.sub)[!is.na(Point.ID)]$color='Red'
tkplot(g.River.sub, canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=1.0,vertex.label=paste(V(g.River.sub)$name,round(V(g.River.sub)$Zmax,2),sep="-"),vertex.label.cex=1, vertex.label.dist=1,margin=0.2) ;
str(g.River.sub)
V(g.River.sub)$name
list.vertex.attributes(g.River.sub)
list.edge.attributes(g.River.sub)
Edgs<-as_data_frame(g.River.2, what=c("edges"));
Vertcs<-as_data_frame(g.River.2, what=c("vertices"))
from.Vertcs<-merge(Edgs, Vertcs, by.x="from", by.y="name", all.x=T ) ;
to.Vertcs<-merge(Edgs, Vertcs, by.x="to", by.y="name", all.x=T ) ;
Edgs.Zmax<-merge(from.Vertcs, to.Vertcs, by="Line.ID") ;
Edgs.Zmax$Elev.Dif<-Edgs.Zmax$Zmax.x-Edgs.Zmax$Zmax.y ;
head(Edgs.Zmax)
g.River.3.edges<-merge(Edgs,Edgs.Zmax, by="Line.ID")[,c("from" , "to" , "Line.ID" , "from.x" , "to.x" , "X.x" , "Y.x" , "Zmax.x" , "Point.ID.x" , "to.y" , "from.y" , "X.y" , "Y.y" , "Zmax.y" , "Point.ID.y" ,"Elev.Dif"  )] ;
names(g.River.3.edges)
g.River.3<-graph.data.frame(g.River.3.edges, vertices=g.River.2.vertices, directed = T) ;
V(g.River.3)[is.na(Point.ID)]$color='Blue'
V(g.River.3)[!is.na(Point.ID)]$color='Red'
edge_attr(g.River.3, 'Elev.Dif'))
tkplot(g.River.3, canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5, vertex.label=g.River.2.vertices$Index, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.edges$Elev.Dif,2), edge.label.cex=1)  ;
tkplot(graph.data.frame(g.River.3.edges[g.River.3.edges$Elev.Dif<0,]),canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5,vertex.label=g.River.2.vertices$Index, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.edges$Elev.Dif,2), edge.label.cex=1)
g.River.3.sub-subgraph.edges(g.River.3,eids=which(E(g.River.3)$Elev.Dif < 0 ));
g.River.3.sub<-subgraph.edges(g.River.3,eids=which(E(g.River.3)$Elev.Dif < 0 ));
g.River.3.sub.data<-as_long_data_frame(g.River.3.sub) ;
g.River.3.sub.data
g.River.3.sub.data<-as_long_data_frame(g.River.3.sub) ;
tkplot(g.River.3.sub,canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.label=g.River.3.sub.data$Point.ID.x, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.sub.data$Elev.Dif,3),edge.label.cex=1) ;
V(g.River.3.sub)
vertex.attributes(g.River.3.sub)
V(g.River.3.sub)$name
tkplot(g.River.3.sub,canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.3.sub)$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.sub.data$Elev.Dif,3),edge.label.cex=1) ;
V(g.River.3.sub)
str(V(g.River.3.sub))
V(g.River.3.sub)$name
make_ego_graph(g.River.3.sub,3,V(g.River.3.sub), mode=c("all"))
g.River.4.sub<-make_ego_graph(g.River.3.sub,3,V(g.River.3.sub), mode=c("all"))
as_long_data_frame(g.River.4.sub)
g.River.4.sub<-make_ego_graph(g.River.3.sub,3,V(g.River.3.sub), mode=c("all"))
as_long_data_frame(g.River.4.sub)
g <- make_ring(10)
g <- connect(g, 2)
tkplot(g)
g <- make_ring(10)
g <- make_ring(10)
tkplot(g)
as_long_data_frame(g.River.4.sub)[1]
as_long_data_frame(g.River.4.sub)[[1]]
as_long_data_frame(g.River.4.sub[[1]])
str(g.River.4.sub)
V(g.River.3.sub)
g.River.4.sub<-make_ego_graph(g.River.3.sub,4,V(g.River.3.sub), mode=c("all"))
as_long_data_frame(g.River.4.sub[[1]])
V(g.River.4.sub[[1]])
g.River.4.sub<-make_ego_graph(g.River.3,4,V(g.River.3.sub), mode=c("all"))
g <- make_ring(10)
as_ids(V(g))
as_ids(E(g))
V(g)$name <- letters[1:10]
as_ids(V(g))
as_ids(E(g))
g.River.4.sub<-make_ego_graph(g.River.3,4,as.ids(V(g.River.3.sub)), mode=c("all"))
g.River.4.sub<-make_ego_graph(g.River.3,4,as_ids(V(g.River.3.sub)), mode=c("all"))
V(g.River.4.sub[[1]])
tkplot(g.River.4.sub[1],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[1]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, vertex.label.dist=1,edge.label.cex=1) ;
g.River.4.sub[1]
tkplot(g.River.4.sub[1])
V(g)$name <- c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j")
make_ego_graph(g, 2, 1:3)
make_ego_graph(g, 2, 1:3)[[1]]
tkplot(make_ego_graph(g, 2, 1:3)[[1]])
g.River.4.sub<-make_ego_graph(g.River.3,4,as_ids(V(g.River.3.sub)), mode=c("all"))
V(g.River.4.sub[[1]])
tkplot(g.River.4.sub[1],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[1]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, vertex.label.dist=1,edge.label.cex=1) ;
tkplot(g.River.4.sub[[1]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[1]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, vertex.label.dist=1,edge.label.cex=1) ;
as_long_data_frame(g.River.4.sub[[1]])
tkplot(g.River.4.sub[[1]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[1]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[1]]$Elev.Dif,3))vertex.label.dist=1,edge.label.cex=1) ;
round(E(g.River.4.sub[[1]])$Elev.Dif,3)
tkplot(g.River.4.sub[[1]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[1]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[1]])$Elev.Dif,3)vertex.label.dist=1,edge.label.cex=1) ;
E(g.River.4.sub[[1]])
E(g.River.4.sub[[1]])$Elev.Dif
E(g.River.4.sub[[1]])$Elev.Dif
round(E(g.River.4.sub[[1]])$Elev.Dif,3)
tkplot(g.River.4.sub[[1]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[1]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[1]])$Elev.Dif,3),vertex.label.dist=1,edge.label.cex=1) ;
g.River.4.sub<-make_ego_graph(g.River.3,3,as_ids(V(g.River.3.sub)), mode=c("all"))
g.River.4.sub<-make_ego_graph(g.River.3,3,as_ids(V(g.River.3.sub)), mode=c("all"))
V(g.River.4.sub[[2]])
as_long_data_frame(g.River.4.sub[[1]])
tkplot(g.River.4.sub[[1]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[1]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[1]])$Elev.Dif,3),vertex.label.dist=1,edge.label.cex=1) ;
tkplot(g.River.4.sub[[2]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[2]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[2]])$Elev.Dif,3),vertex.label.dist=1,edge.label.cex=1) ;
tkplot(g.River.4.sub[[3]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[3]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[3]])$Elev.Dif,3),vertex.label.dist=1,edge.label.cex=1) ;
g.River.4.sub<-make_ego_graph(g.River.3,2,as_ids(V(g.River.3.sub)), mode=c("all"))  ;
g.River.4.sub<-make_ego_graph(g.River.3,2,as_ids(V(g.River.3.sub)), mode=c("all"))  ;
V(g.River.4.sub[[3]])
as_long_data_frame(g.River.4.sub[[3]])
tkplot(g.River.4.sub[[3]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[3]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[3]])$Elev.Dif,3),vertex.label.dist=1,edge.label.cex=1) ;
tkplot(g.River.4.sub[[1]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[1]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[1]])$Elev.Dif,3),vertex.label.dist=1,edge.label.cex=1) ;
tkplot(g.River.4.sub[[2]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[2]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[2]])$Elev.Dif,3),vertex.label.dist=1,edge.label.cex=1) ;
dim(g.River.4.sub)
str(g.River.4.sub)
lenght(g.River.4.sub)
length(g.River.4.sub)
#  Tell the program where the package libraries are  #####################
.libPaths("C:/Felipe/SotwareANDCoding/R_Library/library")  ;
###### Introduction to Web Scraping #####
# Preliminaries
rm(list = ls())
# Set your working directory to some place you can find
setwd("C:/Felipe/LaserDifractionSoilTextureAnalysis/NAPTSoilsData") ;
# First we will need to install the packages we plan to use for this exercise (
# if they are not already installed on your computer).
# install.packages("httr", dependencies = TRUE)
# install.packages("stringr", dependencies = TRUE)
# httr is a package for downloading html
library(httr)
# A package for manipulating strings
library(stringr)
# Lets start by downloading an example web page:
url <- "http://www.naptprogram.org/lab-results/program-archive"
# We start by using the httr package to download the source html
page <- httr::GET(url)
# As we can see, this produces a great deal of information
str(page)
# To get at the actual content of the page, we use the content() function:
page_content <- httr::content(page, "text")
# Now lets print it out
cat(page_content)
### Web Scraping NAPT Soils ###
url.NAPT<-"http://www.naptprogram.org/lab-results/program-archive"
# we start by using the httr package to download the source html
NAPT.page<-httr::GET(url.NAPT)
#######################################################################################################################
#
#       Boehmke, Bradley. 2016. Data Wrangling with R. New York, NY: Springer Science+Business Media.
#
#       chapter 16  Scrapping data
#
#
#######################################################################################################################
#install.packages("XML")
library(XML)
#install.packages('rvest')
#install.packages("magrittr")
library(rvest)
library(magrittr)
##########################################################################################################################
#
#                               Trying with the NAPT website
#
##########################################################################################################################
##########          Getting the most recent results
http://www.naptprogram.org/files/napt/lab-results/2017-q1-soil-general-report.pdf
http://www.naptprogram.org/files/napt/lab-results/2017-q2-soil-report.pdf
http://www.naptprogram.org/files/napt/lab-results/2017-q3-soil-report.pdf
http://www.naptprogram.org/files/napt/lab-results/2017-q1-soil-general-report.pdf
http://www.naptprogram.org/files/napt/lab-results/2016-q1-soil.pdf
http://www.naptprogram.org/files/napt/lab-results/2016-q4-soil-general-report.pdf
# scraping_NAPT <- read_html ("http://www.naptprogram.org/lab-results/program-archive")
# Lab_Results<-scraping_NAPT %>%
#   html_nodes ("li")  %>%
#   html_text ()
#
scraping_NAPT <- read_html ("http://www.naptprogram.org/lab-results")
Lab_Results<-scraping_NAPT %>%
html_nodes ("a")  #%>%
# html_text ()
length(Lab_Results)
Lab_Results[[11]]
links <- getHTMLLinks (scraping_NAPT)
# install.packages('tabulizer')
# install.packages('dplyr')
# install.packages('devtools')
# install.packages('rJava', dependencies=T)
# devtools::install_github('ropensci/tabulizer',dependencies=T)
install.packages('tabulizerjars')
library(tabulizer)
library(dplyr)
SoilREsults<-"http://www.naptprogram.org/files/napt/publications/program-archive/soils/2008-116-120.pdf"
out <- extract_tables(SoilREsults)
str(out[[1]])
as.data.frame(out[[4]])
##########################################################################################################################
#
#       Gaylon S. Campbell;John M. Norman. An Introduction to Environmental Biophysics (p. 131). Kindle Edition.
#
#
# TABLE 9.1.     Hydraulic properties of soils as a function of soil texture
# (recomputed  from Rawls et al. 1992).
#
# Texture                 Silt     Clay     - Y,e       b     Ks
# sand                   0.05     0.03      0.7      1.7     0.0058           0.09        0.03
# loamy sand           0.12     0.07      0.9      2.1     0.0017          0.13        0.06
# sandy loam            0.25     0.10      1.5     3.1     0.00072         0.21        0.1
# loam                   0.40     0.18      I.I  4 . 5   0.00037        0.27        0.12
# silt loam              0.65     0.15     2.1     4.7     0.00019         0.33        0.13
# sandy clay loam    0.13     0.27      2.8     4        0.00012         0.26        0.15
# clay loam             0.34     0.34      2.6     5.2     0.000064       0.32        0.2
# silty clay loam      0.58     0.33      3.3      6.6     0.000042       0.37        0.32
# sandy clay           0.07     0.40      2.9     6        0.000033      0.34        0.24
# silty clay             0.45     0.45      3.4      7.9     0.000025      0.39        0.25
# clay                    0.20     0.60      3.7      7.6     0.000017      0.4          0.27
#
# TABLE 9.1. Hydraulic properties of soils as a function of soil texture
# (recomputed from Rawls et al. 1992).
# Texture Silt Clay - Y,e b Ks 8_33 0_ 1500
# J/kg kg s m-3 ml/ml ml/ml
# sand 0.05 0.03 0.7 1.7 0.0058 0.09 0.03
# loamy sand 0.12 0.07 0.9 2.1 0.0017 0. I 3 0.06
# sandy loam 0.25 0.10 1.5 3.1 0.00072 0.21 0.1
# loam 0.40 0.18 I.I 4.5 0.00037 0.27 0.12
# silt loam 0.65 0.15 2.1 4.7 0.00019 0.33 0.13
# sandy clay loam 0.13 0.27 2.8 4 0.00012 0.26 0.15
# clay loam 0.34 0.34 2.6 5.2 0.000064 0.32 0.2
# silty clay loam 0.58 0.33 3.3 6.6 0.000042 0.37 0.32
# sandy clay 0.07 0.40 2.9 6 0.000033 0.34 0.24
# silty clay 0.45 0.45 3.4 7.9 0.000025 0.39 0.25
# clay 0.20 0.60 3.7 7.6 0.000017 0.4 0.27
##########################################################################################################################
#install.packages("soiltexture")
library('soiltexture')
TT.plot(class.sys ='none' )
TT.plot(class.sys="USDA.TT")
TT.plot(class.sys = "USDA-NCSS.TT",
class.p.bg.col=T
)
#######Cambell Soil Texture Data##############
silt<-c(0.05,
0.12,
0.25,
0.4,
0.65,
0.13,
0.34,
0.58,
0.07,
0.45,
0.2
)
clay<-c(0.03,
0.07,
0.1,
0.18,
0.15,
0.27,
0.34,
0.33,
0.4,
0.45,
0.6
)
Campbell.Soil<-data.frame(clay*100, silt*100) ;
Campbell.Soil$sand<-100-(Campbell.Soil$silt+Campbell.Soil$clay);
names(Campbell.Soil)<-c('CLAY', 'SILT' , 'SAND')
TT.plot(
class.sys          ="USDA-NCSS.TT",
tri.data           = Campbell.Soil,
main               ="Campbell Soil Texture Data",
class.p.bg.col     =T
)
scraping_NAPT <- read_html ("http://www.naptprogram.org/lab-results")
Lab_Results<-scraping_NAPT %>%
html_nodes ("table")  #%>%
length(Lab_Results)
Lab_Results[[11]]
Lab_Results[[10]]
scraping_NAPT <- read_html ("http://www.naptprogram.org/lab-results")
Lab_Results<-scraping_NAPT %>%
html_nodes ("td>a")  #%>%
length(Lab_Results)
Lab_Results[[10]]
Lab_Results
Lab_Results[[50]]
scraping_NAPT <- read_html ("http://www.naptprogram.org/lab-results")
Lab_Results<-scraping_NAPT %>%
html_nodes ("td>a <Soil")  #%>%
scraping_NAPT <- read_html ("http://www.naptprogram.org/lab-results")
Lab_Results<-scraping_NAPT %>%
html_nodes ("td > a >Soil")  #%>%
length(Lab_Results)
scraping_NAPT <- read_html ("http://www.naptprogram.org/lab-results")
Lab_Results<-scraping_NAPT %>%
html_nodes ("td>a>Soil")  #%>%
length(Lab_Results)
scraping_NAPT <- read_html ("http://www.naptprogram.org/lab-results")
Lab_Results<-scraping_NAPT %>%
html_nodes ("td>a")  #%>%
length(Lab_Results)
Lab_Results[[50]]
scraping_NAPT <- read_html ("http://www.naptprogram.org/lab-results")
Lab_Results<-scraping_NAPT %>%
html_nodes ("td>a")  #%>%
html_text ()
scraping_NAPT <- read_html ("http://www.naptprogram.org/lab-results")
Lab_Results<-scraping_NAPT %>%
html_nodes ("td>a")  #%>%
html_text (Lab_Results)
Lab_Results[[50]]
str(Lab_Results[[50]])
str(Lab_Results)
str(Lab_Results)[[1]]
str(Lab_Results[[1]])
Lab_Results[[1]]
Lab_Results[[2]]
Lab_Results[[1:10]]
Lab_Results[[1]]
Lab_Results
scraping_NAPT <- read_html ("http://www.naptprogram.org/lab-results")
Lab_Results<-scraping_NAPT %>%
html_nodes ("td>a")  #%>%
length(Lab_Results)
Node.names.scraping_NAPT<-html_text(Lab_Results)
scraping_NAPT <- read_html ("http://www.naptprogram.org/lab-results")
Lab_Results<-scraping_NAPT %>%
html_nodes ("td>a")  %>%
html_text ()
length(Lab_Results)
Lab_Results[[1]]
str(Lab_Results)
scraping_NAPT <- read_html ("http://www.naptprogram.org/lab-results")
Lab_Results<-scraping_NAPT %>%
html_nodes ("td>a")
length(Lab_Results)
Node.names.scraping_NAPT<-html_text(Lab_Results) ;
str(Node.names.scraping_NAPT)
Soils.NAPT<-which(Node.names.scraping_NAPT == "Soil")
Soils.NAPT
Lab_Results[[Soils.NAPT]]
Lab_Results[Soils.NAPT]
str(Lab_Results[Soils.NAPT])
lenght(Lab_Results[Soils.NAPT])
length(Lab_Results[Soils.NAPT])
scraping_NAPT <- read_html ("http://www.naptprogram.org/lab-results")
Lab_Results   <- scraping_NAPT %>%
html_nodes ("td>a")
Soils.NAPT
length(Lab_Results[Soils.NAPT])
Lab_Results[Soils.NAPT]
str(Lab_Results[Soils.NAPT])
Lab_Results[Soils.NAPT][1]
Lab_Results[Soils.NAPT][2]
as.charcter(Lab_Results[Soils.NAPT][1])
as.character(Lab_Results[Soils.NAPT][1])
str(as.character(Lab_Results[Soils.NAPT][1]))
unlist(Lab_Results[Soils.NAPT][1])
unlist(Lab_Results[Soils.NAPT])
as.charcter(Lab_Results[Soils.NAPT])
as.character(Lab_Results[Soils.NAPT])
as.character(Lab_Results[Soils.NAPT][1])
Lab_Results[[Soils.NAPT]]
length(Lab_Results[Soils.NAPT])
Lab_Results[Soils.NAPT] [1]
head(Lab_Results[Soils.NAPT])
strsplit(as.character(Lab_Results[Soils.NAPT][1])), split='"')
strsplit(as.character(Lab_Results[Soils.NAPT][1]), split='"')
strsplit(as.character(Lab_Results[Soils.NAPT]), split='"')
Soils.NAPT<-which(Node.names.scraping_NAPT == "Soil") ;
str(Soil.NAPT.paths)
Soil.NAPT.paths<-strsplit(as.character(Lab_Results[Soils.NAPT]), split='"') ;
str(Soil.NAPT.paths)
NAPT.pdfs.1<sapply(Soil.NAPT.paths,'[',3)
NAPT.pdfs.1<-sapply(Soil.NAPT.paths,'[',3)
NAPT.pdfs.1
NAPT.pdfs.1<-sapply(Soil.NAPT.paths,'[',2)
NAPT.pdfs.1
NAPT.paths<-paste0('http://www.naptprogram.org/',NAPT.pdfs.1)
NAPT.paths[1]
NAPT.paths[39]
library(tabulizer)
library(dplyr)
out <- extract_tables(NAPT.paths[1])
str(out[[1]])
str(out)
as.data.frame(out[[1]])
as.data.frame(out[[1]], row.names = T )
as.data.frame(out[[1]], optional=T )
as.data.frame(out[[2]], optional=T )
as.data.frame(out[[1]], optional=T)
SoilTemp<-as.data.frame(out[[1]], optional=T)
names(SoilTemp)
SoilTemp<-as.data.frame(out[[1]], optional=T)
SoilTemp
str(SoilTemp)
str(SoilTemp)[,1]
str(SoilTemp)[1,]
SoilTemp<-as.data.frame(out[[1]], optional=T)
str(SoilTemp)
SoilTemp<-as.data.frame(out[[1]], optional=T)
SoilTemp<-as.data.frame(out[[1]], optional=T)
SoilTemp
str(SoilTemp)
SoilTemp[1,]
SoilTemp[2,]
SoilTemp.Col_names[[1:5,]
SoilTemp.Col_names[1:5,]
SoilTemp.Col_names[1:5,]
SoilTemp.Col_names<-SoilTemp[1:5,]
SoilTemp.Col_names
SoilTemp.Col_names<-SoilTemp[1:3,]
SoilTemp.Col_names<-SoilTemp[1:3,]
SoilTemp.Col_names
SoilTemp.Col_names
rep(c('Medaian' , 'MAD'),4)
Column.names<-rep(c('Median' , 'MAD'),4)
paste(SoilTemp.Col_names[1,],rep(c('Median' , 'MAD'),4), sep="_")
SoilTemp.Col_names<-SoilTemp[1:3,]
SoilTemp.Col_names
SoilTemp.Col_names[1,]
str(SoilTemp.Col_names[1,])
str(SoilTemp)
SoilTemp<-as.data.frame(out[[1]], optional=T ,stringsAsFactors = F)
str(SoilTemp)
SoilTemp.Col_names<-SoilTemp[1:3,]
SoilTemp.Col_names
SoilTemp<-as.data.frame(out[[1]], optional=T ,stringsAsFactors = F)
str(SoilTemp)
SoilTemp.Col_names<-SoilTemp[1:3,]
SoilTemp.Col_names
str(SoilTemp)
head(SoilTemp)
SoilTemp.Col_names<-SoilTemp[1:3,]
SoilTemp.Col_names
SoilTemp.Col_names[1,]
SoilTemp.Col_names[1,1]
str(SoilTemp.Col_names[1,1])
SoilTemp
SoilTemp.Col_names<-SoilTemp[1,]
SoilTemp.Col_names<-SoilTemp[1:3,]
SoilTemp.Col_names[1,]
SoilTemp.Col_names[1,1:3]
SoilTemp.Col_names[1,2]
