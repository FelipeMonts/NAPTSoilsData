str(E(g.River.3)[inc(g.River.3.edges$Elev.Dif<0)]))
str(E(g.River.3)[inc(g.River.3.edges$Elev.Dif<0)])
v(g.River.3)
V(g.River.3)
V(g.River.3)[inc(g.River.3.edges$Elev.Dif<0)]
g.River.4<-graph.data.frame(E(g.River.3)[inc(g.River.3.edges$Elev.Dif<0)], vertices=V(g.River.3)[inc(g.River.3.edges$Elev.Dif<0)]);
as_data_frame(E(g.River.3)[inc(g.River.3.edges$Elev.Dif<0)])
get.edgelist(E(g.River.3)[inc(g.River.3.edges$Elev.Dif<0)])
str(V(g.River.3)[inc(g.River.3.edges$Elev.Dif<0)])
E(g.River.3)[inc(g.River.3.edges$Elev.Dif<0)]
subbgraph.edges(g.River.3,E(g.River.3)[inc(g.River.3.edges$Elev.Dif<0)])
subgraph.edges(g.River.3,E(g.River.3)[inc(g.River.3.edges$Elev.Dif<0)])
tkplot(subgraph.edges(g.River.3,E(g.River.3)[inc(g.River.3.edges$Elev.Dif<0)]))
tkplot(subgraph.edges(g.River.3,E(g.River.3)[inc(g.River.3.edges$Elev.Dif<0)]),canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5, vertex.label=g.River.2.vertices$Index, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.edges$Elev.Dif,2), edge.label.cex=1) ;
subgraph.edges(g.River.3,E(g.River.3)
subgraph.edges(g.River.3,E(g.River.3))
g.River.3.edges$Elev.Dif<0
subgraph.edges(g.River.3,E(g.River.3))
subgraph.edges(g.River.3,E(g.River.3)[inc(g.River.3.edges$Elev.Dif<0)])
as_data_frame(subgraph.edges(g.River.3,E(g.River.3)[inc(g.River.3.edges$Elev.Dif<0)]))
Edgs.Zmax$Elev.Dif<-Edgs.Zmax$Zmax.x-Edgs.Zmax$Zmax.y ;
head(Edgs.Zmax)
Edgs.Zmax[which(Edgs.Zmax$Elev.Dif<0),]
g.River.3.edges<-merge(Edgs,Edgs.Zmax, by="Line.ID")[,c("from" , "to" , "Line.ID" , "from.x" , "to.x" , "X.x" , "Y.x" , "Zmax.x" , "Point.ID.x" , "to.y" , "from.y" , "X.y" , "Y.y" , "Zmax.y" , "Point.ID.y" ,"Elev.Dif"  )] ;
names(g.River.3.edges)
g.River.3<-graph.data.frame(g.River.3.edges, vertices=g.River.2.vertices, directed = T) ;
V(g.River.3)[is.na(Point.ID)]$color='Blue'
V(g.River.3)[!is.na(Point.ID)]$color='Red'
tkplot(g.River.3, canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5, vertex.label=g.River.2.vertices$Index, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.edges$Elev.Dif,2), edge.label.cex=1)  ;
subgraph.edges(g.River.3,E(g.River.3)[inc(g.River.3.edges$Elev.Dif<0)])
subgraph.edges(g.River.3,E(g.River.3)[inc(g.River.3.edges$Elev.Dif<0)])
as_data_frame(subgraph.edges(g.River.3,E(g.River.3)[inc(g.River.3.edges$Elev.Dif<0)]))
str(Edgs.Zmax$Elev.Dif<-Edgs.Zmax$Zmax.x-Edgs.Zmax$Zmax.y )
str(Edgs.Zmax)
g.River.3.edges<-merge(Edgs,Edgs.Zmax, by="Line.ID")[,c("from" , "to" , "Line.ID" , "from.x" , "to.x" , "X.x" , "Y.x" , "Zmax.x" , "Point.ID.x" , "to.y" , "from.y" , "X.y" , "Y.y" , "Zmax.y" , "Point.ID.y" ,"Elev.Dif"  )] ;
names(g.River.3.edges)
g.River.2.vertices
g.River.3<-graph.data.frame(g.River.3.edges, vertices=g.River.2.vertices, directed = T) ;
g.River.3
g.River.3.edges[g.River.3.edges$Elev.Dif<0]
g.River.3.edges[g.River.3.edges$Elev.Dif<0,]
as_data_frame(subgraph.edges(g.River.3,E(g.River.3)[inc(g.River.3.edges[g.River.3.edges$Elev.Dif<0,])]))
g.River.3.edges[g.River.3.edges$Elev.Dif<0,]
as_data_frame(subgraph.edges(g.River.3,E(g.River.3)[inc(g.River.3.edges[g.River.3.edges$Elev.Dif<0])]))
subgraph.edges(g.River.3.edges[g.River.3.edges$Elev.Dif<0,])
g.River.3.edges$Elev.Dif<0
graph.data.frame(g.River.3.edges[g.River.3.edges$Elev.Dif<0,])
tkplot(graph.data.frame(g.River.3.edges[g.River.3.edges$Elev.Dif<0,]))
as_data_frame(graph.data.frame(g.River.3.edges[g.River.3.edges$Elev.Dif<0,]))
tkplot(graph.data.frame(g.River.3.edges[g.River.3.edges$Elev.Dif<0,]),canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5)
tkplot(graph.data.frame(g.River.3.edges[g.River.3.edges$Elev.Dif<0,]),canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5,vertex.label=g.River.2.vertices$Index, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.edges$Elev.Dif,2), edge.label.cex=1)
g.River.3.sub<-subgraph.edges(g.River.3,E(g.River.3)[inc(g.River.3.edges$Elev.Dif<0)] ;
g.River.3.sub<-subgraph.edges(g.River.3,E(g.River.3)[inc(g.River.3.edges$Elev.Dif<0)] ;
g.River.3.sub<-subgraph.edges(g.River.3,E(g.River.3)[inc(g.River.3.edges$Elev.Dif<0)] );
tkplot(g.River.3.sub,canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5, vertex.label=g.River.2.vertices$Index, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.edges$Elev.Dif,2), edge.label.cex=1) ;
V(g.River.3)
V(g.River.3.sub)
tkplot(g.River.3.sub,canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5, vertex.label=V(g.River.3.sub), vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.edges$Elev.Dif,2), edge.label.cex=1) ;
round(g.River.3.sub.edges$Elev.Dif,2)
round(g.River.3.sub.edges$Elev.Dif,2)
E(g.River.3.sub)
round(E(g.River.3.sub)$Elev.Dif,2)
tkplot(g.River.3.sub,canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5, vertex.label=V(g.River.3.sub), vertex.label.cex=1, vertex.label.dist=1, edge.label=E(g.River.3.sub), edge.label.cex=1) ;
tkplot(g.River.3.sub,canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5, vertex.label=V(g.River.3.sub), vertex.label.cex=1, vertex.label.dist=1, edge.label=E(g.River.3.sub), edge.label.cex=1) ;
tkplot(graph.data.frame(g.River.3.edges[g.River.3.edges$Elev.Dif<0,]),canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5,vertex.label=g.River.2.vertices$Index, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.edges$Elev.Dif,2), edge.label.cex=1)
g.River.3.sub<-subgraph.edges(g.River.3,E(g.River.3)[inc(g.River.3.edges$Elev.Dif<0)] );
tkplot(graph.data.frame(g.River.3.edges[g.River.3.edges$Elev.Dif<0,]),canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5,vertex.label=g.River.2.vertices$Index, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.edges$Elev.Dif,2), edge.label.cex=1)
g.River.3.sub<-subgraph.edges(g.River.3,E(g.River.3)[inc(g.River.3.edges$Elev.Dif<0)] );
tkplot(g.River.3.sub,canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5, vertex.label=V(g.River.3.sub), vertex.label.cex=1, vertex.label.dist=1, edge.label=E(g.River.3.sub), edge.label.cex=1) ;
E(g.River.3.sub)
E(g.River.3.sub)$Elev.Dif
E(g.River.3.sub)
E(g.River.3.sub)
list.edge.attributes(g.River.3.sub)
edge_attr(g.River.3.sub,"Elev.Dif")
g.River.3.sub<-subgraph.edges(g.River.3,E(g.River.3)[inc(g.River.3.edges$Elev.Dif<0)] );
g.River.3.sub
V(g.River.3.sub)
E(g.River.3.sub)
list.edge.attributes(g.River.3.sub)
edge_attr(g.River.3.sub,"Elev.Dif")
tkplot(graph.data.frame(g.River.3.edges[g.River.3.edges$Elev.Dif<0,]),canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5,vertex.label=g.River.2.vertices$Index, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.edges$Elev.Dif,2), edge.label.cex=1)
tkplot(graph.data.frame(g.River.3.edges[g.River.3.edges$Elev.Dif<0,]),canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5,vertex.label=g.River.2.vertices$Index, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.edges$Elev.Dif,2), edge.label.cex=1)
g.River.3.sub<-subgraph.edges(g.River.3,E(g.River.3)[inc(g.River.3.edges$Elev.Dif<0)] );
tkplot(g.River.3.sub,canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5, vertex.label=V(g.River.3.sub), vertex.label.cex=1, vertex.label.dist=1, edge.label=E(g.River.3.sub), edge.label.cex=1) ;
V(g.River.3.sub)
V(g.River.3.sub)
V(g.River.3.sub)
g.River.3.sub<-subgraph.edges(g.River.3,E(g.River.3)[inc(g.River.3.edges$Elev.Dif<0)] );
V(g.River.3.sub)
str(V(g.River.3.sub))
E(g.River.3.sub)
str(E(g.River.3.sub))
list.edge.attributes(g.River.3.sub)
V(g.River.3.sub)
E(g.River.3.sub)
edge_attr(g.River.3.sub,"Elev.Dif")
g.River.3.sub
graph.data.frame(g.River.3.sub)
as_long_data_frame(g.River.3.sub)
g.River.3.sub.data<-as_long_data_frame(g.River.3.sub) ;
g.River.3.sub<-subgraph.edges(g.River.3,E(g.River.3)[inc(g.River.3.edges$Elev.Dif<0)] );
g.River.3.sub.data<-as_long_data_frame(g.River.3.sub) ;
g.River.3.sub.data
graph.data.frame(g.River.3.edges[g.River.3.edges$Elev.Dif<0,]
)
tkplot(g.River.3, canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5, vertex.label=g.River.2.vertices$Index, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.edges$Elev.Dif,2), edge.label.cex=1)  ;
tkplot(graph.data.frame(g.River.3.edges[g.River.3.edges$Elev.Dif<0,]),canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5,vertex.label=g.River.2.vertices$Index, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.edges$Elev.Dif,2), edge.label.cex=1)
############################################################################################################################
# Luke, Douglas. 2015. A User's Guide to Network Analysis in R. Use R! Cham: Springer International Publishing. https://doi.org/10.1007/978-3-319-23883-8.
#
# Using R network packages to manage the river network in PIHM and PIHM GIS
#
# Felipe Montes 01/23/2018
#
############################################################################################################################
############################################################################################################################
# Kolaczyk, Eric D., and Gábor Csárdi. 2014. Statistical Analysis of Network Data with R. Vol. 65. Use R! New York, NY: Springer New York. https://doi.org/10.1007/978-1-4939-0983-4.
# https://github.com/kolaczyk/sand/blob/master/sand/inst/code/chapter2.R
# Using R network packages to manage the river network in PIHM and PIHM GIS
#
# Felipe Montes 01/24/2018
############################################################################################################################
#  Tell the program where the package libraries are  #####################
.libPaths("C:/Felipe/SotwareANDCoding/R_Library/library")  ;
#  Set Working directory
Project<-"MergeVectorLayer000_q25_a100000" ;
library(devtools)  ;
install.packages("sand") ;
library(sand)
#install_sand_packages() ;
load(paste0('C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_R_Scripts\\MM_PIHM_inputs\\',Project,'\\MM_PHIMInputsR_V2.RData'));
##### Add the river nodes from the  river mesh#########################
library(sp) ;
library(rgdal) ;
# Read information about the shape file
MergedRiver.info<-ogrInfo('C:/Aun Trabajo en Proceso/HansYostDeepCreek/Mar0820181045/Stream8000_sln32_dens150m_xln_Decomp.shp');
MergedRiver.info$nrows
install.packages("sand")
MergedRiver.info$nrows
MergedRiver<-readOGR('C:/Aun Trabajo en Proceso/HansYostDeepCreek/Mar0820181045/Stream8000_sln32_dens150m_xln_Decomp.shp');
str(MergedRiver, max.level = 2)  ;
library(devtools)  ;
install.packages("sand") ;
library(sand)
load(paste0('C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_R_Scripts\\MM_PIHM_inputs\\',Project,'\\MM_PHIMInputsR_V2.RData'));
##### Add the river nodes from the  river mesh#########################
library(sp) ;
library(rgdal) ;
MergedRiver.info<-ogrInfo('C:/Aun Trabajo en Proceso/HansYostDeepCreek/Mar0820181045/Stream8000_sln32_dens150m_xln_Decomp.shp');
MergedRiver.info$nrows
MergedRiver<-readOGR('C:/Aun Trabajo en Proceso/HansYostDeepCreek/Mar0820181045/Stream8000_sln32_dens150m_xln_Decomp.shp');
str(MergedRiver, max.level = 2)  ;
sapply(slot(MergedRiver,"lines"), function(x) slot(x,"ID"))
coordinates(MergedRiver)[[1]]
lapply(coordinates(MergedRiver),function(x) x[[1]])
sapply(coordinates(MergedRiver),function(x) x[[1]])
MergedRiver.coords.matrix<-matrix(data=sapply(coordinates(MergedRiver),function(x) x[[1]]), nrow = MergedRiver.info$nrows, ncol = 4, byrow=T) ;
MergedRiver.coords.df<-data.frame(MergedRiver.coords.matrix[,c(1,3)],MergedRiver.coords.matrix[,c(2,4)]);
names(MergedRiver.coords.df)<-c('P1.X', 'P1.Y', 'P2.X', 'P2.Y') ;
MergedRiver.coords.df$Line.ID<-as.character(seq(1:MergedRiver.info$nrows)) ;
MergedRiver.Stacked.Point.coords<-rbind(MergedRiver.coords.matrix[,c(1,3)],MergedRiver.coords.matrix[,c(2,4)])   ;
head(MergedRiver.Stacked.Point.coords) ;
str(MergedRiver.Stacked.Point.coords) ;
MergedRiver.Unique.Point.coords<-data.frame(unique(MergedRiver.Stacked.Point.coords))  ;
names(MergedRiver.Unique.Point.coords)<-c("X" , "Y");
MergedRiver.Unique.Point.coords$Point.ID<-seq(1:dim(MergedRiver.Unique.Point.coords)[1]) ;
head(MergedRiver.Unique.Point.coords) ;
str(MergedRiver.Unique.Point.coords)  ;
MergedRiver.From.points<-merge(MergedRiver.coords.df[,c("P1.X", "P1.Y" ,  "Line.ID")], MergedRiver.Unique.Point.coords, by.x=c('P1.X', 'P1.Y'), by.y=c("X" , "Y"), all.x=T);
head(MergedRiver.From.points) ;
str(MergedRiver.From.points) ;
MergedRiver.To.points<-merge(MergedRiver.coords.df[,c("P2.X", "P2.Y" ,  "Line.ID")], MergedRiver.Unique.Point.coords, by.x=c('P2.X', 'P2.Y'), by.y=c("X" , "Y"), all.x=T);
head(MergedRiver.To.points)
str(MergedRiver.To.points)
MergedRiver.Line.Point<-merge(MergedRiver.From.points,MergedRiver.To.points,by="Line.ID");
head(MergedRiver.Line.Point)
str(MergedRiver.Line.Point)
head(MergedRiver.Unique.Point.coords) ;
str(MergedRiver.Unique.Point.coords);
head(River.Nodes.Elevation) ;
str(River.Nodes.Elevation) ;
Refined.Merged.Nodes<-merge(River.Nodes.Elevation, MergedRiver.Unique.Point.coords, by=c('X', 'Y'),all.x=T) ;
head(Refined.Merged.Nodes)
str(Refined.Merged.Nodes)
summary(Refined.Merged.Nodes)
g.River.2.edges<-MergedRiver.Line.Point[,c("Point.ID.x", "Point.ID.y" , "Line.ID") ] ;
g.River.2.edges<-g.River.2.edges[order(g.River.2.edges$Line.ID),] ;
head(g.River.2.edges,20)
g.River.2.vertices<-Refined.Merged.Nodes[, c('Index', 'X', 'Y','Zmax', 'Point.ID') ] ;
head(g.River.2.vertices)
g.River.2<-graph.data.frame(g.River.2.edges, vertices=g.River.2.vertices, directed = T) ;
str(g.River.2);
plot(g.River.2, layout=layout_nicely,vertex.size= 1, edge.arrow.size=0.1, vertex.label=NA)
tkplot(g.River.2, canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.1, vertex.label=NA)
tkplot(g.River.2, canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.1, vertex.label=NA)
is.simple(g.River.2)
E(graph.data.frame)
degree(g.River.2, mode="in")
which(degree(g.River.2) == 0)
degree(g.River.2, mode="out")
which(degree(g.River.2, mode="out") == 2)
V(g.River.2)[is.na(Point.ID)]$color='Blue'
V(g.River.2)[!is.na(Point.ID)]$color='Red'
tkplot(g.River.2, canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.1, vertex.label=g.River.2.vertices$Index, vertex.label.cex=1, vertex.label.dist=1)   ;
tkplot(g.River.2, canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5, vertex.label=paste(g.River.2.vertices$Index,round(g.River.2.vertices$Zmax,2),sep="-"), vertex.label.cex=1, vertex.label.dist=1) ;
g.River.sub<-induced.subgraph(g.River.2,seq(1,30)) ;
V(g.River.sub)[is.na(Point.ID)]$color='Blue'
V(g.River.sub)[!is.na(Point.ID)]$color='Red'
tkplot(g.River.sub, canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=1.0,vertex.label=paste(V(g.River.sub)$name,round(V(g.River.sub)$Zmax,2),sep="-"),vertex.label.cex=1, vertex.label.dist=1,margin=0.2) ;
str(g.River.sub)
V(g.River.sub)$name
list.vertex.attributes(g.River.sub)
list.edge.attributes(g.River.sub)
Edgs<-as_data_frame(g.River.2, what=c("edges"));
Vertcs<-as_data_frame(g.River.2, what=c("vertices"))
from.Vertcs<-merge(Edgs, Vertcs, by.x="from", by.y="name", all.x=T ) ;
to.Vertcs<-merge(Edgs, Vertcs, by.x="to", by.y="name", all.x=T ) ;
Edgs.Zmax<-merge(from.Vertcs, to.Vertcs, by="Line.ID") ;
Edgs.Zmax$Elev.Dif<-Edgs.Zmax$Zmax.x-Edgs.Zmax$Zmax.y ;
head(Edgs.Zmax)
g.River.3.edges<-merge(Edgs,Edgs.Zmax, by="Line.ID")[,c("from" , "to" , "Line.ID" , "from.x" , "to.x" , "X.x" , "Y.x" , "Zmax.x" , "Point.ID.x" , "to.y" , "from.y" , "X.y" , "Y.y" , "Zmax.y" , "Point.ID.y" ,"Elev.Dif"  )] ;
names(g.River.3.edges)
g.River.3<-graph.data.frame(g.River.3.edges, vertices=g.River.2.vertices, directed = T) ;
V(g.River.3)[is.na(Point.ID)]$color='Blue'
V(g.River.3)[!is.na(Point.ID)]$color='Red'
tkplot(g.River.3, canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5, vertex.label=g.River.2.vertices$Index, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.edges$Elev.Dif,2), edge.label.cex=1)  ;
tkplot(graph.data.frame(g.River.3.edges[g.River.3.edges$Elev.Dif<0,]),canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5,vertex.label=g.River.2.vertices$Index, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.edges$Elev.Dif,2), edge.label.cex=1)
E(g.River.3)$attr
E(g.River.3)$attr
E(g.River.3)[.]$attr
E(g.River.3)[*]$attr
E(g.River.3)['*']$attr
E(g.River.3)[]$attr
E(g.River.3)[1:3]$attr
g.River.3<-graph.data.frame(g.River.3.edges, vertices=g.River.2.vertices, directed = T) ;
V(g.River.3)[is.na(Point.ID)]$color='Blue'
V(g.River.3)[!is.na(Point.ID)]$color='Red'
E(g.River.3)[1]$attr
edge_attr(g.River.3)
E(g.River.3)[1:5]
edge_attr(g.River.3, 'Elev.Dif')
str(edge_attr(g.River.3, 'Elev.Dif'))
which(E(g.River.3)$Elev.Dif < 0 )
g.River.3.sub<-subgraph.edges(g.River.3,eids=which(E(g.River.3)$Elev.Dif < 0 ));
g.River.3.sub.data<-as_long_data_frame(g.River.3.sub) ;
g.River.3.sub.data
tkplot(g.River.3.sub,canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5, vertex.label=V(g.River.3.sub), vertex.label.cex=1, vertex.label.dist=1, edge.label=E(g.River.3.sub), edge.label.cex=1) ;
tkplot(g.River.3.sub,canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5, vertex.label=V(g.River.3.sub), vertex.label.cex=1, vertex.label.dist=1, edge.label=E(g.River.3.sub), edge.label.cex=1) ;
tkplot(g.River.3.sub,canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, vertex.label.dist=1, edge.label.cex=1) ;
g.River.3.sub.data<-as_long_data_frame(g.River.3.sub) ;
g.River.3.sub.data
round(g.River.3.sub.data$Elev.Dif,2
)
tkplot(g.River.3.sub,canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.label=g.River.3.sub.data$Point.ID.x, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.sub.data$Elev.Dif,3),edge.label.cex=1) ;
adjacent_vertices(g.River.3.sub,mode=c('all'))
V(g.River.3.sub)
g <- make_graph("Zachary")
adjacent_vertices(g, c(1, 34))
which(E(g.River.3)$Elev.Dif < 0 )
adjacent_vertices(g.River.3,which(E(g.River.3)$Elev.Dif < 0 ), mode=c("all") )
subgraph(g.River.3.sub, adjacent_vertices(g.River.3,which(E(g.River.3)$Elev.Dif < 0 ), mode=c("all") ))
adjacent_vertices(g.River.3,which(E(g.River.3)$Elev.Dif < 0 ), mode=c("all") )
V(adjacent_vertices(g.River.3,which(E(g.River.3)$Elev.Dif < 0 ), mode=c("all") ))
str(adjacent_vertices(g.River.3,which(E(g.River.3)$Elev.Dif < 0 ), mode=c("all") ))
as_ids(adjacent_vertices(g.River.3,which(E(g.River.3)$Elev.Dif < 0 ), mode=c("all") ))
unlist(adjacent_vertices(g.River.3,which(E(g.River.3)$Elev.Dif < 0 ), mode=c("all") ))
str(unlist(adjacent_vertices(g.River.3,which(E(g.River.3)$Elev.Dif < 0 ), mode=c("all") )))
unlist(adjacent_vertices(g.River.3,which(E(g.River.3)$Elev.Dif < 0 ), mode=c("all") ), use.names = F)
subgraph(g.River.3,unlist(adjacent_vertices(g.River.3,which(E(g.River.3)$Elev.Dif < 0 ), mode=c("all") ), use.names = F))
induced_subgraph(g.River.3,unlist(adjacent_vertices(g.River.3,which(E(g.River.3)$Elev.Dif < 0 ), mode=c("all") ), use.names = F))
g.River.3.sub.ed<-subgraph.edges(g.River.3,eids=which(E(g.River.3)$Elev.Dif < 0 ));
g.River.3.sub.ed.data<-as_long_data_frame(g.River.3.sub.ed) ;
g.River.3.sub<-induced_subgraph(g.River.3,unlist(adjacent_vertices(g.River.3,which(E(g.River.3)$Elev.Dif < 0 ), mode=c("all") ), use.names = F))
tkplot(g.River.3.sub)
g.River.3.sub-subgraph.edges(g.River.3,eids=which(E(g.River.3)$Elev.Dif < 0 ));
g.River.3.sub.data<-as_long_data_frame(g.River.3.sub) ;
tkplot(g.River.3.sub,canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.label=g.River.3.sub.data$Point.ID.x, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.sub.data$Elev.Dif,3),edge.label.cex=1) ;
g.River.3<-graph.data.frame(g.River.3.edges, vertices=g.River.2.vertices, directed = T) ;
V(g.River.3)[is.na(Point.ID)]$color='Blue'
V(g.River.3)[!is.na(Point.ID)]$color='Red'
edge_attr(g.River.3, 'Elev.Dif'))
tkplot(g.River.3, canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5, vertex.label=g.River.2.vertices$Index, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.edges$Elev.Dif,2), edge.label.cex=1)  ;
tkplot(graph.data.frame(g.River.3.edges[g.River.3.edges$Elev.Dif<0,]),canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5,vertex.label=g.River.2.vertices$Index, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.edges$Elev.Dif,2), edge.label.cex=1)
g.River.3.sub-subgraph.edges(g.River.3,eids=which(E(g.River.3)$Elev.Dif < 0 ));
g.River.3.sub.data<-as_long_data_frame(g.River.3.sub) ;
tkplot(g.River.3.sub,canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.label=g.River.3.sub.data$Point.ID.x, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.sub.data$Elev.Dif,3),edge.label.cex=1) ;
g.River.3.sub-subgraph.edges(g.River.3,eids=which(E(g.River.3)$Elev.Dif < 0 ));
g.River.3.sub.data<-as_long_data_frame(g.River.3.sub) ;
g.River.3.sub.data
.libPaths("C:/Felipe/SotwareANDCoding/R_Library/library")  ;
Project<-"MergeVectorLayer000_q25_a100000" ;
library(devtools)  ;
install.packages("sand") ;
install.packages("sand")
library(sand)
load(paste0('C:\\Felipe\\PIHM-CYCLES\\PIHM\\PIHM_R_Scripts\\MM_PIHM_inputs\\',Project,'\\MM_PHIMInputsR_V2.RData'));
##### Add the river nodes from the  river mesh#########################
library(sp) ;
library(rgdal) ;
MergedRiver.info<-ogrInfo('C:/Aun Trabajo en Proceso/HansYostDeepCreek/Mar0820181045/Stream8000_sln32_dens150m_xln_Decomp.shp');
MergedRiver.info$nrows
MergedRiver<-readOGR('C:/Aun Trabajo en Proceso/HansYostDeepCreek/Mar0820181045/Stream8000_sln32_dens150m_xln_Decomp.shp');
str(MergedRiver, max.level = 2)  ;
sapply(slot(MergedRiver,"lines"), function(x) slot(x,"ID"))
coordinates(MergedRiver)[[1]]
lapply(coordinates(MergedRiver),function(x) x[[1]])
sapply(coordinates(MergedRiver),function(x) x[[1]])
MergedRiver.coords.matrix<-matrix(data=sapply(coordinates(MergedRiver),function(x) x[[1]]), nrow = MergedRiver.info$nrows, ncol = 4, byrow=T) ;
MergedRiver.coords.df<-data.frame(MergedRiver.coords.matrix[,c(1,3)],MergedRiver.coords.matrix[,c(2,4)]);
names(MergedRiver.coords.df)<-c('P1.X', 'P1.Y', 'P2.X', 'P2.Y') ;
MergedRiver.coords.df$Line.ID<-as.character(seq(1:MergedRiver.info$nrows)) ;
MergedRiver.Stacked.Point.coords<-rbind(MergedRiver.coords.matrix[,c(1,3)],MergedRiver.coords.matrix[,c(2,4)])   ;
head(MergedRiver.Stacked.Point.coords) ;
str(MergedRiver.Stacked.Point.coords) ;
MergedRiver.Unique.Point.coords<-data.frame(unique(MergedRiver.Stacked.Point.coords))  ;
names(MergedRiver.Unique.Point.coords)<-c("X" , "Y");
MergedRiver.Unique.Point.coords$Point.ID<-seq(1:dim(MergedRiver.Unique.Point.coords)[1]) ;
head(MergedRiver.Unique.Point.coords) ;
str(MergedRiver.Unique.Point.coords)  ;
MergedRiver.From.points<-merge(MergedRiver.coords.df[,c("P1.X", "P1.Y" ,  "Line.ID")], MergedRiver.Unique.Point.coords, by.x=c('P1.X', 'P1.Y'), by.y=c("X" , "Y"), all.x=T);
head(MergedRiver.From.points) ;
str(MergedRiver.From.points) ;
MergedRiver.To.points<-merge(MergedRiver.coords.df[,c("P2.X", "P2.Y" ,  "Line.ID")], MergedRiver.Unique.Point.coords, by.x=c('P2.X', 'P2.Y'), by.y=c("X" , "Y"), all.x=T);
head(MergedRiver.To.points)
str(MergedRiver.To.points)
MergedRiver.Line.Point<-merge(MergedRiver.From.points,MergedRiver.To.points,by="Line.ID");
head(MergedRiver.Line.Point)
str(MergedRiver.Line.Point)
head(MergedRiver.Unique.Point.coords) ;
str(MergedRiver.Unique.Point.coords);
head(River.Nodes.Elevation) ;
str(River.Nodes.Elevation) ;
Refined.Merged.Nodes<-merge(River.Nodes.Elevation, MergedRiver.Unique.Point.coords, by=c('X', 'Y'),all.x=T) ;
head(Refined.Merged.Nodes)
str(Refined.Merged.Nodes)
summary(Refined.Merged.Nodes)
g.River.2.edges<-MergedRiver.Line.Point[,c("Point.ID.x", "Point.ID.y" , "Line.ID") ] ;
g.River.2.edges<-g.River.2.edges[order(g.River.2.edges$Line.ID),] ;
head(g.River.2.edges,20)
g.River.2.vertices<-Refined.Merged.Nodes[, c('Index', 'X', 'Y','Zmax', 'Point.ID') ] ;
head(g.River.2.vertices)
g.River.2<-graph.data.frame(g.River.2.edges, vertices=g.River.2.vertices, directed = T) ;
str(g.River.2);
plot(g.River.2, layout=layout_nicely,vertex.size= 1, edge.arrow.size=0.1, vertex.label=NA)
tkplot(g.River.2, canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.1, vertex.label=NA)
is.simple(g.River.2)
E(graph.data.frame)
degree(g.River.2, mode="in")
which(degree(g.River.2) == 0)
degree(g.River.2, mode="out")
which(degree(g.River.2, mode="out") == 2)
V(g.River.2)[is.na(Point.ID)]$color='Blue'
V(g.River.2)[!is.na(Point.ID)]$color='Red'
tkplot(g.River.2, canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.1, vertex.label=g.River.2.vertices$Index, vertex.label.cex=1, vertex.label.dist=1)   ;
tkplot(g.River.2, canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5, vertex.label=paste(g.River.2.vertices$Index,round(g.River.2.vertices$Zmax,2),sep="-"), vertex.label.cex=1, vertex.label.dist=1) ;
g.River.sub<-induced.subgraph(g.River.2,seq(1,30)) ;
V(g.River.sub)[is.na(Point.ID)]$color='Blue'
V(g.River.sub)[!is.na(Point.ID)]$color='Red'
tkplot(g.River.sub, canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=1.0,vertex.label=paste(V(g.River.sub)$name,round(V(g.River.sub)$Zmax,2),sep="-"),vertex.label.cex=1, vertex.label.dist=1,margin=0.2) ;
str(g.River.sub)
V(g.River.sub)$name
list.vertex.attributes(g.River.sub)
list.edge.attributes(g.River.sub)
Edgs<-as_data_frame(g.River.2, what=c("edges"));
Vertcs<-as_data_frame(g.River.2, what=c("vertices"))
from.Vertcs<-merge(Edgs, Vertcs, by.x="from", by.y="name", all.x=T ) ;
to.Vertcs<-merge(Edgs, Vertcs, by.x="to", by.y="name", all.x=T ) ;
Edgs.Zmax<-merge(from.Vertcs, to.Vertcs, by="Line.ID") ;
Edgs.Zmax$Elev.Dif<-Edgs.Zmax$Zmax.x-Edgs.Zmax$Zmax.y ;
head(Edgs.Zmax)
g.River.3.edges<-merge(Edgs,Edgs.Zmax, by="Line.ID")[,c("from" , "to" , "Line.ID" , "from.x" , "to.x" , "X.x" , "Y.x" , "Zmax.x" , "Point.ID.x" , "to.y" , "from.y" , "X.y" , "Y.y" , "Zmax.y" , "Point.ID.y" ,"Elev.Dif"  )] ;
names(g.River.3.edges)
g.River.3<-graph.data.frame(g.River.3.edges, vertices=g.River.2.vertices, directed = T) ;
V(g.River.3)[is.na(Point.ID)]$color='Blue'
V(g.River.3)[!is.na(Point.ID)]$color='Red'
edge_attr(g.River.3, 'Elev.Dif'))
tkplot(g.River.3, canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5, vertex.label=g.River.2.vertices$Index, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.edges$Elev.Dif,2), edge.label.cex=1)  ;
tkplot(graph.data.frame(g.River.3.edges[g.River.3.edges$Elev.Dif<0,]),canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.size= 2, edge.arrow.size=0.5,vertex.label=g.River.2.vertices$Index, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.edges$Elev.Dif,2), edge.label.cex=1)
g.River.3.sub-subgraph.edges(g.River.3,eids=which(E(g.River.3)$Elev.Dif < 0 ));
g.River.3.sub<-subgraph.edges(g.River.3,eids=which(E(g.River.3)$Elev.Dif < 0 ));
g.River.3.sub.data<-as_long_data_frame(g.River.3.sub) ;
g.River.3.sub.data
g.River.3.sub.data<-as_long_data_frame(g.River.3.sub) ;
tkplot(g.River.3.sub,canvas.width=1800, canvas.height=900, layout=layout_nicely ,vertex.label=g.River.3.sub.data$Point.ID.x, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.sub.data$Elev.Dif,3),edge.label.cex=1) ;
V(g.River.3.sub)
vertex.attributes(g.River.3.sub)
V(g.River.3.sub)$name
tkplot(g.River.3.sub,canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.3.sub)$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, vertex.label.dist=1, edge.label=round(g.River.3.sub.data$Elev.Dif,3),edge.label.cex=1) ;
V(g.River.3.sub)
str(V(g.River.3.sub))
V(g.River.3.sub)$name
make_ego_graph(g.River.3.sub,3,V(g.River.3.sub), mode=c("all"))
g.River.4.sub<-make_ego_graph(g.River.3.sub,3,V(g.River.3.sub), mode=c("all"))
as_long_data_frame(g.River.4.sub)
g.River.4.sub<-make_ego_graph(g.River.3.sub,3,V(g.River.3.sub), mode=c("all"))
as_long_data_frame(g.River.4.sub)
g <- make_ring(10)
g <- connect(g, 2)
tkplot(g)
g <- make_ring(10)
g <- make_ring(10)
tkplot(g)
as_long_data_frame(g.River.4.sub)[1]
as_long_data_frame(g.River.4.sub)[[1]]
as_long_data_frame(g.River.4.sub[[1]])
str(g.River.4.sub)
V(g.River.3.sub)
g.River.4.sub<-make_ego_graph(g.River.3.sub,4,V(g.River.3.sub), mode=c("all"))
as_long_data_frame(g.River.4.sub[[1]])
V(g.River.4.sub[[1]])
g.River.4.sub<-make_ego_graph(g.River.3,4,V(g.River.3.sub), mode=c("all"))
g <- make_ring(10)
as_ids(V(g))
as_ids(E(g))
V(g)$name <- letters[1:10]
as_ids(V(g))
as_ids(E(g))
g.River.4.sub<-make_ego_graph(g.River.3,4,as.ids(V(g.River.3.sub)), mode=c("all"))
g.River.4.sub<-make_ego_graph(g.River.3,4,as_ids(V(g.River.3.sub)), mode=c("all"))
V(g.River.4.sub[[1]])
tkplot(g.River.4.sub[1],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[1]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, vertex.label.dist=1,edge.label.cex=1) ;
g.River.4.sub[1]
tkplot(g.River.4.sub[1])
V(g)$name <- c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j")
make_ego_graph(g, 2, 1:3)
make_ego_graph(g, 2, 1:3)[[1]]
tkplot(make_ego_graph(g, 2, 1:3)[[1]])
g.River.4.sub<-make_ego_graph(g.River.3,4,as_ids(V(g.River.3.sub)), mode=c("all"))
V(g.River.4.sub[[1]])
tkplot(g.River.4.sub[1],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[1]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, vertex.label.dist=1,edge.label.cex=1) ;
tkplot(g.River.4.sub[[1]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[1]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, vertex.label.dist=1,edge.label.cex=1) ;
as_long_data_frame(g.River.4.sub[[1]])
tkplot(g.River.4.sub[[1]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[1]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[1]]$Elev.Dif,3))vertex.label.dist=1,edge.label.cex=1) ;
round(E(g.River.4.sub[[1]])$Elev.Dif,3)
tkplot(g.River.4.sub[[1]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[1]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[1]])$Elev.Dif,3)vertex.label.dist=1,edge.label.cex=1) ;
E(g.River.4.sub[[1]])
E(g.River.4.sub[[1]])$Elev.Dif
E(g.River.4.sub[[1]])$Elev.Dif
round(E(g.River.4.sub[[1]])$Elev.Dif,3)
tkplot(g.River.4.sub[[1]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[1]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[1]])$Elev.Dif,3),vertex.label.dist=1,edge.label.cex=1) ;
g.River.4.sub<-make_ego_graph(g.River.3,3,as_ids(V(g.River.3.sub)), mode=c("all"))
g.River.4.sub<-make_ego_graph(g.River.3,3,as_ids(V(g.River.3.sub)), mode=c("all"))
V(g.River.4.sub[[2]])
as_long_data_frame(g.River.4.sub[[1]])
tkplot(g.River.4.sub[[1]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[1]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[1]])$Elev.Dif,3),vertex.label.dist=1,edge.label.cex=1) ;
tkplot(g.River.4.sub[[2]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[2]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[2]])$Elev.Dif,3),vertex.label.dist=1,edge.label.cex=1) ;
tkplot(g.River.4.sub[[3]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[3]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[3]])$Elev.Dif,3),vertex.label.dist=1,edge.label.cex=1) ;
g.River.4.sub<-make_ego_graph(g.River.3,2,as_ids(V(g.River.3.sub)), mode=c("all"))  ;
g.River.4.sub<-make_ego_graph(g.River.3,2,as_ids(V(g.River.3.sub)), mode=c("all"))  ;
V(g.River.4.sub[[3]])
as_long_data_frame(g.River.4.sub[[3]])
tkplot(g.River.4.sub[[3]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[3]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[3]])$Elev.Dif,3),vertex.label.dist=1,edge.label.cex=1) ;
tkplot(g.River.4.sub[[1]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[1]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[1]])$Elev.Dif,3),vertex.label.dist=1,edge.label.cex=1) ;
tkplot(g.River.4.sub[[2]],canvas.width=1800, canvas.height=900, layout=layout_nicely ,V(g.River.4.sub[[2]])$name, vertex.size= 2, edge.arrow.size=0.5, vertex.label.cex=1, edge.label=round(E(g.River.4.sub[[2]])$Elev.Dif,3),vertex.label.dist=1,edge.label.cex=1) ;
dim(g.River.4.sub)
str(g.River.4.sub)
lenght(g.River.4.sub)
length(g.River.4.sub)
Texture.data.0<-ALPP.Texture
.libPaths("C:/Felipe/SotwareANDCoding/R_Library/library")  ;
# Preliminaries
rm(list = ls())
setwd("C:/Felipe/LaserDifractionSoilTextureAnalysis/NAPTSoilsData") ;
# httr is a package for downloading html
library(httr)
# A package for manipulating strings
library(stringr)
library(stringi)
# packages for extracting pdf data and manipulating data
library(tabulizer)
library(dplyr)
dir.create("../ALPP_PDFs");
ALPP.Tables <- extract_tables(paste0('../ALPP_PDFs/','ALLP', 20, '.pdf')) ;
ALPP.Tables[grepl('(SubTestCode 189)',ALPP.Tables)]
ALPP.Tables[grepl('(SubTestCode 189)',ALPP.Tables)]
ALPP.Tables
ALPP.Tables[160]
ALPP.Tables[161]
ALPP.Tables[184]
ALPP.Tables[183]
ALPP.Tables[182]
ALPP.Tables[170]
ALPP.Tables[172]
ALPP.Tables[173]
ALPP.Tables[175]
ALPP.Tables[178]
ALPP.Tables[180]
ALPP.Tables[grepl('(SubTestCode 218)',ALPP.Tables)]
c(113:115)
ALPP.Tables <- extract_tables(paste0('../ALPP_PDFs/','ALLP', 20, '.pdf'),pages=c(113:115)) ;
ALPP.Tables
ALPP.Tables <- extract_tables(paste0('../ALPP_PDFs/','ALLP', 20, '.pdf'),pages=c(113:115)) ;
ALPP.Tables[1]
sss<-ALPP.Tables[1][c(43,44),] ;
sss<-ALPP.Tables[1];
ALPP.Tables[1]
str(ALPP.Tables[1])
ALPP.Tables[1][1]
sss<-ALPP.Tables[1][1][c(43,44),];
ALPP.Tables[[1]]
-ALPP.Tables[[1]][c(43,44),]
ALPP.Tables[[1]][c(43,44),]
[c(43,44),]
ALPP.Tables[[1]]
sss<-ALPP.Tables[[1]];
str(sss)
which[sss[,1] == "Grand Median"]
which(sss[,1] == "Grand Median")
which(sss[,1] == "Median Abs Dev")
Median.row<-which(sss[,1] == "Grand Median")
MAD.row<-which(sss[,1] == "Median Abs Dev") ;
