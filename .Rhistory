cumsum(LassDiff.1[1:74,2])
barplot(cumsum(LassDiff.1[1:74,2]),names.arg =LassDiff.1[1:74,1], horiz = T, xlim=c(0,100))
###### Trying size distribution
LassDiff.1[1:51,c(1,2)]
LassDiff.1[52:74,c(1,2)]
max(LassDiff.1[52:74,c(2,3)])
barplot(height=LassDiff.1[1:74,2],width=rep(1,74), names.arg=LassDiff.1[1:74,1], col=NA, border=gray(0.5), horiz = T, ylim=c(0.01,100), xlim=c(0,5))
barplot(height=LassDiff.1[1:74,3],width=rep(1,74), names.arg=LassDiff.1[1:74,1],beside=T, col=gray(0.3,alpha=0.5), horiz = T, ylim=c(0.01,100), xlim=c(0,max(LassDiff.1[52:74,c(2,3)])),add=T)
barplot(as.matrix(LassDiff.1[1:74,3]),beside=T,add=T, col=rgb(1,0,1, alpha=0.5) , horiz = T)
barplot(height=LassDiff.1[1:74,2],width=diff(LassDiff.1[1:74,1],differences = 1), names.arg=LassDiff.1[1:74,1],beside=T, col=rgb(0,0,1, alpha=0.5), horiz = T, ylim=c(0.01,100), xlim=c(0,max(LassDiff.1[52:74,c(2,3)])))
barplot(height=LassDiff.1[1:74,3],width=diff(LassDiff.1[1:74,1],differences = 1), names.arg=LassDiff.1[1:74,1],beside=T, col=rgb(1,0,0, alpha=0.5), horiz = T, ylim=c(0.01,100), xlim=c(0,max(LassDiff.1[52:74,c(2,3)])),add=T)
barplot(as.matrix(LassDiff.1[1:74,3]),beside=T,add=T, col=rgb(1,0,1, alpha=0.5) , horiz = T)
diff(LassDiff.1[1:74,1],differences = 1)
length(MassANDSand)
ScalingFactor<-(1-(MassANDSand[2,2:length(MassANDSand)]/MassANDSand[1,2:length(MassANDSand)]))  ;
ScaledLD.data<-data.frame(LassDiff.1[1:74,1],as.matrix(LassDiff.1[1:74,2:length(MassANDSand)]) %*% diag(ScalingFactor));
names(ScaledLD.data)<-c('Size',LassDiff.name)
head(ScaledLD.data)
ClayScaled.data<-ScaledLD.data ;
head(ClayScaled.data)
SiltScaled.data<-ScaledLD.data ;
######## changing the margin parameter prr mar
par(mar=c(5.1, 10, 4.1, 2.1))
# creating an adequate size labels numbering for the bar plot
SizeLabels<-c(as.character(signif(ScaledLD.data[1:18,1],2)), as.character(signif(ScaledLD.data[19:38,1],2)), as.character(signif(ScaledLD.data[39:55,1],2)), as.character(signif(ScaledLD.data[56:74,1],2)))  ;
head(ClayScaled.data)
names(ClayScaled.data)
barplot(height=ClayScaled.data[,21], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(1,1,1,0.5), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")))
names(ScaledLD.data)<-c('Size',LassDiff.name)
head(ScaledLD.data)
names(ScaledLD.data)
barplot(height=Scaled.data[,21], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(1,1,1,0.5), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")))
barplot(height=Scaled.data[,40], width=rep(1.4,74), space=0.2, col=rgb(1,1,1,0.5), horiz = T,las=1,add=T)
length(MassANDSand)
ScalingFactor<-(1-(MassANDSand[2,2:length(MassANDSand)]/MassANDSand[1,2:length(MassANDSand)]))  ;
ScaledLD.data<-data.frame(LassDiff.1[1:74,1],as.matrix(LassDiff.1[1:74,2:length(MassANDSand)]) %*% diag(ScalingFactor));
names(ScaledLD.data)<-c('Size',LassDiff.name)
head(ScaledLD.data)
names(ScaledLD.data)
barplot(height=ScaledLD.data[,21], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(1,1,1,0.5), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")))
barplot(height=ScaledLD.data[,40], width=rep(1.4,74), space=0.2, col=rgb(1,1,1,0.5), horiz = T,las=1,add=T)
barplot(height=ScaledLD.data[,40], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(1,1,1,0.5), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")))
barplot(height=ScaledLD.data[,21], width=rep(1.4,74), space=0.2, col=rgb(1,0,0,0.5), horiz = T,las=1,add=T)
barplot(height=ScaledLD.data[,21], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(1,1,1,0.5), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")))
barplot(height=ScaledLD.data[,40], width=rep(1.4,74), space=0.2, col=rgb(1,0,0,0.5), horiz = T,las=1,add=T)
barplot(height=ScaledLD.data[,21], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(1,0,0,0.5), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")))
barplot(height=ScaledLD.data[,40], width=rep(1.4,74), space=0.2, col=rgb(1,1,1,0.5), horiz = T,las=1,add=T)
barplot(height=ScaledLD.data[,40], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(1,0,0,0.5), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")))
barplot(height=ScaledLD.data[,21], width=rep(1.4,74), space=0.2, col=rgb(1,1,1,0.5), horiz = T,las=1,add=T)
barplot(height=ScaledLD.data[,40], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(0,0,1,0.5), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")))
barplot(height=ScaledLD.data[,21], width=rep(1.4,74), space=0.2, col=rgb(1,1,1,0.5), horiz = T,las=1,add=T)
legend("bottomright", legend = c('2017-113', '2011-118'), pch=c( 22, 22), pt.bg = c(rgb(0,0,1,0.5) , rgb(1,1,1,0.5) ), pt.lwd=3)
text(2.5,112, "SILT", col="black")
text(2.5,40, "CLAY", col="black")
abline(h=91,lty=2, col=rgb(1,0,0,1), lwd=10)
tiff(filename=paste0("../Manuscript/Figures/Comparison", 1,".tiff"), width=3840 , height=3840, pointsize = 80  )
#initilaizing the horizontal bar plot with the first scaled LD results
barplot(height=ScaledLD.data[,40], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(0,0,1,0.5), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")))
barplot(height=ScaledLD.data[,21], width=rep(1.4,74), space=0.2, col=rgb(1,1,1,0.5), horiz = T,las=1,add=T)
legend("bottomright", legend = c('2017-113', '2011-118'), pch=c( 22, 22), pt.bg = c(rgb(0,0,1,0.5) , rgb(1,1,1,0.5) ), pt.lwd=3)
text(2.5,112, "SILT", col="black")
text(2.5,40, "CLAY", col="black")
abline(h=91,lty=2, col=rgb(1,0,0,1), lwd=10)
dev.off()
tiff(filename=paste0("../Manuscript/Figures/Comparison", 1,".tiff"), width=3840 , height=3840, pointsize = 80  )
#initilaizing the horizontal bar plot with the first scaled LD results
barplot(height=ScaledLD.data[,40], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(0,0,1,1), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")))
barplot(height=ScaledLD.data[,21], width=rep(1.4,74), space=0.2, col=rgb(1,1,1,0.5), horiz = T,las=1,add=T)
legend("bottomright", legend = c('2017-113', '2011-118'), pch=c( 22, 22), pt.bg = c(rgb(0,0,1,1) , rgb(1,1,1,0.5) ), pt.lwd=3)
text(2.5,112, "SILT", col="black")
text(2.5,40, "CLAY", col="black")
abline(h=91,lty=2, col=rgb(1,0,0,1), lwd=10)
dev.off()
barplot(height=ScaledLD.data[,2], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(0,1,0,0.5), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")))
col2rgb("yellow")
barplot(height=ScaledLD.data[,2], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(0,1,0,0.5), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")))
barplot(height=ScaledLD.data[,47], width=rep(1.4,74), space=0.2, col=rgb(1,2,0,0.5), horiz = T,las=1,add=T)
barplot(height=ScaledLD.data[,2], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(0,1,0,0.5), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")))
barplot(height=ScaledLD.data[,47], width=rep(1.4,74), space=0.2, col=rgb(1,1,0,0.5), horiz = T,las=1,add=T)
legend("bottomright", legend = c('2011-119','2012-103'), pch=c( 22, 22), pt.bg = c(rgb(0,1,0,0.5), rgbrgb(1,2,0,0.5)), pt.lwd=3)
text(2.5,112, "SILT", col="black")
legend("bottomright", legend = c('2011-119','2012-103'), pch=c( 22, 22), pt.bg = c(rgb(0,1,0,0.5), rgb(1,2,0,0.5)), pt.lwd=3)
legend("bottomright", legend = c('2011-119','2012-103'), pch=c( 22, 22), pt.bg = c(rgb(0,1,0,0.5), rgb(1,1,0,0.5)), pt.lwd=3)
text(2.5,112, "SILT", col="black")
text(2.5,40, "CLAY", col="black")
abline(h=91,lty=2, col=rgb(1,0,0,1), lwd=10)
tiff(filename=paste0("../Manuscript/Figures/Comparison", 2,".tiff"), width=3840 , height=3840, pointsize = 80  )
#initilaizing the horizontal bar plot with the first scaled LD results
barplot(height=ScaledLD.data[,2], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(0,1,0,0.5), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")))
barplot(height=ScaledLD.data[,47], width=rep(1.4,74), space=0.2, col=rgb(1,1,0,0.5), horiz = T,las=1,add=T)
legend("bottomright", legend = c('2011-119','2012-103'), pch=c( 22, 22), pt.bg = c(rgb(0,1,0,0.5), rgb(1,1,0,0.5)), pt.lwd=3)
text(2.5,112, "SILT", col="black")
text(2.5,40, "CLAY", col="black")
abline(h=91,lty=2, col=rgb(1,0,0,1), lwd=10)
dev.off()
text(2.5,112, "SILT", col="black")
barplot(height=ScaledLD.data[,2], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(0,1,0,0.5), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")))
barplot(height=ScaledLD.data[,47], width=rep(1.4,74), space=0.2, col=rgb(1,1,0,0.5), horiz = T,las=1,add=T)
legend("bottomright", legend = c('2011-119','2012-103'), pch=c( 22, 22), pt.bg = c(rgb(0,1,0,0.5), rgb(1,1,0,0.5)), pt.lwd=3)
text(2.5,112, "SILT", col="black")
text(2.5,40, "CLAY", col="black")
abline(h=91,lty=2, col=rgb(1,0,0,1), lwd=10)
text(2.0,112, "SILT", col="black")
text(2.0,40, "CLAY", col="black")
text(2.2,112, "SILT", col="black")
text(2.2,40, "CLAY", col="black")
text(2.2,113, "SILT", col="black")
text(2.2,40, "CLAY", col="black")
tiff(filename=paste0("../Manuscript/Figures/Comparison", 2,".tiff"), width=3840 , height=3840, pointsize = 80  )
#initilaizing the horizontal bar plot with the first scaled LD results
barplot(height=ScaledLD.data[,2], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(0,1,0,0.5), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")))
barplot(height=ScaledLD.data[,47], width=rep(1.4,74), space=0.2, col=rgb(1,1,0,0.5), horiz = T,las=1,add=T)
legend("bottomright", legend = c('2011-119','2012-103'), pch=c( 22, 22), pt.bg = c(rgb(0,1,0,0.5), rgb(1,1,0,0.5)), pt.lwd=3)
text(2.2,113, "SILT", col="black")
text(2.2,40, "CLAY", col="black")
abline(h=91,lty=2, col=rgb(1,0,0,1), lwd=10)
dev.off()
barplot(height=ScaledLD.data[,18], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(1,1,0,0.5), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")))
barplot(height=ScaledLD.data[,19], width=rep(1.4,74), space=0.2, col=rgb(1,1,0,0.5), horiz = T,las=1,add=T)
col2rgb('magenta')
barplot(height=ScaledLD.data[,18], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(1,0,1,0.5), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")))
col2rgb('black')
barplot(height=ScaledLD.data[,19], width=rep(1.4,74), space=0.2, col=rgb(0,0,0,0.5), horiz = T,las=1,add=T)
barplot(height=ScaledLD.data[,20], width=rep(1.4,74), space=0.2, col=rgb(1,0,0,0.5), horiz = T,las=1,add=T)
barplot(height=ScaledLD.data[,18], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(1,0,1,0.5), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")))
barplot(height=ScaledLD.data[,19], width=rep(1.4,74), space=0.2, col=rgb(0,0,0,1), horiz = T,las=1,add=T)
barplot(height=ScaledLD.data[,20], width=rep(1.4,74), space=0.2, col=rgb(1,0,0,0.5), horiz = T,las=1,add=T)
barplot(height=ScaledLD.data[,19], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(0,0,0,1), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")))
barplot(height=ScaledLD.data[,18], width=rep(1.4,74), space=0.2, col=rgb(1,0,1,0.5), horiz = T,las=1,add=T)
barplot(height=ScaledLD.data[,19], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(0,0,0,1), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")),xlim =c(0,2.5))
barplot(height=ScaledLD.data[,18], width=rep(1.4,74), space=0.2, col=rgb(1,0,1,0.5), horiz = T,las=1,add=T)
barplot(height=ScaledLD.data[,20], width=rep(1.4,74), space=0.2, col=rgb(1,0,0,0.5), horiz = T,las=1,add=T)
legend("bottomright", legend = c('SRS-1709','2013-119', 'SRS-1508'), pch=c( 22, 22 , 22), pt.bg = c(rgb(0,0,0,1), rgb(1,0,1,0.5),rgb(1,0,0,0.5)), pt.lwd=3)
text(2.5,112, "SILT", col="black")
text(2.4,112, "SILT", col="black")
text(2.4,40, "CLAY", col="black")
abline(h=91,lty=2, col=rgb(1,0,0,1), lwd=10)
tiff(filename=paste0("../Manuscript/Figures/Comparison", 3,".tiff"), width=3840 , height=3840, pointsize = 80  )
#initilaizing the horizontal bar plot with the first scaled LD results
barplot(height=ScaledLD.data[,19], width=rep(1.4,74),names.arg=SizeLabels[seq(1,74)], space=0.2, col=rgb(0,0,0,1), horiz = T, ylim=c(0.01,110),las=1,cex.names = 0.5, cex.axis=1,xlab="Particle Size Fraction (%)", ylab=expression(paste("Equivalent particle size ( ", mu, "m)")),xlim =c(0,2.5))
barplot(height=ScaledLD.data[,18], width=rep(1.4,74), space=0.2, col=rgb(1,0,1,0.5), horiz = T,las=1,add=T)
barplot(height=ScaledLD.data[,20], width=rep(1.4,74), space=0.2, col=rgb(1,0,0,0.5), horiz = T,las=1,add=T)
legend("bottomright", legend = c('SRS-1709','2013-119', 'SRS-1508'), pch=c( 22, 22 , 22), pt.bg = c(rgb(0,0,0,1), rgb(1,0,1,0.5),rgb(1,0,0,0.5)), pt.lwd=3)
text(2.4,112, "SILT", col="black")
text(2.4,40, "CLAY", col="black")
abline(h=91,lty=2, col=rgb(1,0,0,1), lwd=10)
dev.off()
##############################################################################################################
#
#
# Program to Extract soil Texture data from the NAPT pdf document data base and plot texture plots from them.
#
# Felipe Montes 2018
#
# Uses the  package 'soiltexture' to plot the texture
# Also uses the package 'XLConnect' to read and write information from excel spreadsheets with soil samples information
#
#
###############################################################################################################
#  Tell the program where the package libraries are  #####################
.libPaths("C:/Felipe/SotwareANDCoding/R_Library/library")  ;
###### Introduction to Web Scraping #####
# Preliminaries
rm(list = ls())
# Set your working directory to some place you can find
setwd("C:/Felipe/LaserDifractionSoilTextureAnalysis/NAPTSoilsData") ;
# First we will need to install the packages we plan to use for this exercise (
# if they are not already installed on your computer).
# install.packages("httr", dependencies = TRUE)
# install.packages("stringr", dependencies = TRUE)
# install.packages("soiltexture")
# httr is a package for downloading html
library(httr)
# A package for manipulating strings
library(stringr)
library(XML)
#install.packages('rvest')
#install.packages("magrittr")
library(rvest)
library(magrittr)
# Package for soil texture plotting
library('soiltexture')
# Package for writing and reading excel files
library(XLConnect) ;
NAPT.data<-readWorksheetFromFile("Results_data_all.xlsx", sheet="Combined", startRow=1, endRow=864) ;
str(NAPT.data)
head(NAPT.data)
NAPT.data.head<-NAPT.data[c(1,2),] ;
NAPT.data.nohead<-NAPT.data[-c(1,2),] ;
NAPT.data.nohead$SAMPLE<-str_split(str_split(NAPT.data.nohead$X, " ", simplify = T)[,2], "_" ,simplify = T)[,1] ;
NAPT.data.nohead$VALUE<-str_split(str_split(NAPT.data.nohead$X, " ", simplify = T)[,2], "_" ,simplify = T)[,2] ;
NAPT.data.nohead.n_rows<-which(NAPT.data.nohead[,1] == 'n', arr.ind = T)  ;
NAPT.data.nohead[NAPT.data.nohead.n_rows, 'SAMPLE']<-NAPT.data.nohead[NAPT.data.nohead.n_rows+1, 'SAMPLE'] ;
NAPT.data.nohead[NAPT.data.nohead.n_rows, 'VALUE']<-NAPT.data.nohead[NAPT.data.nohead.n_rows, 'X'] ;
str(NAPT.data.nohead)
head(NAPT.data.nohead)
NAPT.data.Median<-NAPT.data.nohead[NAPT.data.nohead$VALUE == 'Median',]
str(NAPT.data.Median)
head(NAPT.data.Median)
NAPT.data.MAD<-NAPT.data.nohead[NAPT.data.nohead$VALUE == 'MAD',]
str(NAPT.data.MAD)
head(NAPT.data.MAD)
NAPT.data.n<-NAPT.data.nohead[NAPT.data.nohead$VALUE == 'n',]
str(NAPT.data.n)
head(NAPT.data.n)
NAPT.Texture<-merge(NAPT.data.Median,NAPT.data.MAD, by= 'SAMPLE')
str(NAPT.Texture)
head(NAPT.Texture,30)
NAPT.Texture[which(!is.na(NAPT.Texture$V4.x)),]
NAPT.Texture$ANALYSIS<-'PLACEHOLDER'  ;
NAPT.Texture[which(!is.na(NAPT.Texture$V4.x)),'ANALYSIS']<- 'Pipette'  ;
NAPT.Texture[which(is.na(NAPT.Texture$V4.x)),'ANALYSIS']<- 'Hydrometer'  ;
NAPT.Texture.Hydrom<-NAPT.Texture[,c(1,2,3,4,5,9)] ;
str(NAPT.Texture)
head(NAPT.Texture,10)
tail(NAPT.Texture,10)
names(NAPT.Texture)<-c('SAMPLE' ,' NAME','SAND_Med' , 'SILT_Med' , 'CLAY_Med','SAND_Med' , 'SILT_Med' , 'CLAY_Med', 'VALUE.X', 'NAME_2' , 'SAND_MAD' , 'SILT_MAD' , 'CLAY_MAD','SAND_MAD' , 'SILT_MAD' , 'CLAY_MAD' , 'VALUE.Y', 'ANALYSIS') ;
NAPT.Texture.Hydrometer<-NAPT.Texture[which(NAPT.Texture$ANALYSIS == 'Hydrometer'), c(1,3,4,5,11,12,13,18)] ;
NAPT.Texture.Pipette<-NAPT.Texture[which(NAPT.Texture$ANALYSIS == 'Pipette'), c(1,6,7,8,14,15,16,18)] ;
NAPT.all<-rbind(NAPT.Texture.Hydrometer,NAPT.Texture.Pipette)
str(NAPT.all)
head(NAPT.all,20)
tail(NAPT.all,20)
NAPT.all[which(NAPT.all$ANALYSIS == 'Pipette'),]
NAPT.Texture.data<-data.frame(as.numeric(NAPT.all$SAND_Med),as.numeric(NAPT.all$SILT_Med),as.numeric(NAPT.all$CLAY_Med),as.numeric(NAPT.all$SAND_MAD),as.numeric(NAPT.all$SILT_MAD),as.numeric(NAPT.all$CLAY_MAD), NAPT.all$SAMPLE, NAPT.all$ANALYSIS) ;
str(NAPT.Texture.data)
names(NAPT.Texture.data)[c(1:6)]<-c('SAND' , 'SILT' , 'CLAY', 'MAD_SAND' , 'MAD_SILT' , 'MAD_CLAY') ;
head(NAPT.Texture.data)
str(NAPT.Texture.data)
which(is.na(NAPT.Texture.data$SAND))
NAPT.Texture.data.norm<-TT.normalise.sum(NAPT.Texture.data)  ;
which(is.na.data.frame(NAPT.Texture.data.norm),arr.ind = T)
NAPT<-data.frame(NAPT.Texture.data.norm,NAPT.Texture.data)  ;
names(NAPT)[c(10,11)]<-c('SAMPLE' , 'ANALYSIS') ;
head(NAPT)
ALLP.data.1<-readWorksheetFromFile("Results_data_all.xlsx", sheet="ALP",startCol= 1, endCol=7) ;
str(ALLP.data.1)
head(ALLP.data.1)
ALLP.data.2<-ALLP.data.1[,c('Sand_Mean' , 'Silt_Mean' , 'Clay_Mean', 'Sand_MAD' ,'Silt_MAD' , 'Clay_MAD' ,'Sample')] ;
names(ALLP.data.2)<-c('SAND' , 'SILT' , 'CLAY', 'MAD_SAND' , 'MAD_SILT' , 'MAD_CLAY', 'SAMPLE')  ;
ALLP.norm<-TT.normalise.sum(ALLP.data.2)   ;
ALLP<-data.frame(ALLP.norm,ALLP.data.2 )  ;
str(ALLP)
head(ALLP)
NAPT.Texture.clases<-TT.points.in.classes(
tri.data = NAPT,
class.sys = "USDA-NCSS.TT",
PiC.type  = "t"
)
NAPT$TextureClass<-NAPT.Texture.clases  ;
head(NAPT)
ALLP.Texture.clases<-TT.points.in.classes(
tri.data = ALLP,
class.sys = "USDA-NCSS.TT",
PiC.type  = "t"
)
ALLP$ANALYSIS<-c('Hydrometer') ;
ALLP$TextureClass<-ALLP.Texture.clases ;
head(ALLP)
str(ALLP)
head(NAPT)
str(NAPT)
All.Data<-rbind(NAPT,ALLP) ;
head(All.Data)
tail(All.Data)
str(All.Data)
All.Data$TextureFactor<-as.factor(All.Data$TextureClass) ;
levels(All.Data$TextureFactor)
for (i in levels(All.Data$TextureFactor)) {
#i=levels(All.Data$TextureFactor)[1]
assign(paste0('Texture_',i),All.Data[All.Data$TextureFactor==i,])
}
head(Texture_C)
################### Select the Samples
Selected_Samples<-rbind(Texture_C, Texture_CL[1:6,] , Texture_LS[1:6,], Texture_S[1:6,],Texture_SCL, Texture_SICL[1:6,],Texture_SIL[1:6,], Texture_SL[1:6,])
head(Selected_Samples)
names(Selected_Samples)[1:6]<-c('CLAY_Norm' , 'SILT_Norm' , 'SAND_Norm', 'SAND' , 'SILT' , 'CLAY')  ;
Paper.Samples<-readWorksheetFromFile("Results_data_all.xlsx", sheet="Selected_Final",startCol= 1, endCol=10) ;
head(Paper.Samples)
########### Plot all the data together the Data ######################
geo.ALLP<-TT.plot(
class.sys          ="USDA-NCSS.TT",
frame.bg.col       ="gray75",
bg                 ="white"
)
SCC.Data.0
head(SCC.Data.0)
SRS_Samples<-readWorksheetFromFile("Results_data_all.xlsx", sheet="Carbon and carbonatesOriginal", header=T, startRow=1, endRow=25, startCol=42, endCol=48 ) ;
SCC.Data.all<-rbind(SCC.Data.0, SRS_Samples)
head(SCC.Data.all,20)
tail(SCC.Data.all,30)
###### Select the interesting samples to compare
# Original c('2011-118' ,'2011-119' , '2017-113' , '2012-103' , '2013-119' , 'SRS1709' , ' SRSSRS1508')
SamplesToCompare<-c('2011-118' , '2017-113' , '2011-119' , '2012-103' , '2013-119' , 'SRS1709' , ' SRSSRS1508' ) ;
#SamplesToCompare<-c('2011-106' ,'2011-109' , '2016-111' , '2012-101' , '2013-109' , 'SRS1709' , ' SRSSRS1508') ;
Comparing.Samples.all<-Paper.Samples[which(Paper.Samples$SAMPLE %in% SamplesToCompare),]
Comparing.Samples<-unique(Comparing.Samples.all[which(Comparing.Samples.all$ANALYSIS == 'Hydrometer'), ])
Comparing.Samples
Comparing.Samples
TT.plot(
class.sys          ="USDA-NCSS.TT",
main               ="Sample selected for comparison",
tri.data           = Comparing.Samples[7,],
css.names          =c('CLAY_Norm' , 'SILT_Norm' , 'SAND_Norm'),
frame.bg.col       ="gray75",
pch                =16,
bg                 ="Black",
cex                = 1.5,
lwd                = 1
)
TT.plot(
class.sys          ="USDA-NCSS.TT",
main               ="Sample selected for comparison",
tri.data           = Comparing.Samples[7,],
css.names          =c('CLAY_Norm' , 'SILT_Norm' , 'SAND_Norm'),
frame.bg.col       ="gray75",
pch                =16,
col                 ="Black",
cex                = 1.5,
lwd                = 1
)
TT.plot(
class.sys          ="USDA-NCSS.TT",
main               ="Sample selected for comparison",
tri.data           = Comparing.Samples[7,],
css.names          =c('CLAY_Norm' , 'SILT_Norm' , 'SAND_Norm'),
frame.bg.col       ="gray75",
pch                =16,
col                 ="Black",
cex                = 1.5,
lwd                = 1
)
TT.points(
geo.ALLP,
tri.data           = Comparing.Samples[5,],
css.names          =c('CLAY_Norm' , 'SILT_Norm' , 'SAND_Norm'),
pch                = 16,
col                ="GREEN",
cex                = 1.2,
lwd                = 0.5
)
TT.points(
geo.ALLP,
tri.data           = Comparing.Samples[5,],
css.names          =c('CLAY_Norm' , 'SILT_Norm' , 'SAND_Norm'),
pch                = 21,
bg                 ="GREEN",
cex                = 1.2,
lwd                = 0.5
)
TT.points(
geo.ALLP,
tri.data           = Comparing.Samples[2,],
css.names          =c('CLAY_Norm' , 'SILT_Norm' , 'SAND_Norm'),
pch                = 21,
bg                 ="BLUE",
cex                = 1.2,
lwd                = 0.5
)
tiff(filename="../Manuscript/Figures/ComparisonTexture.tiff", width=3840 , height=3840, pointsize = 80  )
TT.plot(
class.sys          ="USDA-NCSS.TT",
main               ="Sample selected for comparison",
tri.data           = Comparing.Samples[7,],
css.names          =c('CLAY_Norm' , 'SILT_Norm' , 'SAND_Norm'),
frame.bg.col       ="gray75",
pch                =16,
col                 ="Black",
cex                = 1.5,
lwd                = 1
)
TT.points(
geo.ALLP,
tri.data           = Comparing.Samples[5,],
css.names          =c('CLAY_Norm' , 'SILT_Norm' , 'SAND_Norm'),
pch                = 21,
bg                 ="GREEN",
cex                = 1.2,
lwd                = 0.5
)
TT.points(
geo.ALLP,
tri.data           = Comparing.Samples[2,],
css.names          =c('CLAY_Norm' , 'SILT_Norm' , 'SAND_Norm'),
pch                = 21,
bg                 ="BLUE",
cex                = 1.2,
lwd                = 0.5
)
# TT.points(
#   geo.ALLP,
#   tri.data           = Comparing.Samples[1,],
#   css.names          =c('CLAY_Norm' , 'SILT_Norm' , 'SAND_Norm'),
#   pch                = 21,
#   bg                 ="Yellow",
#   cex                = 1.2,
#   lwd                = 0.5
# )
#
#
# TT.points(
#   geo.ALLP,
#   tri.data           = Comparing.Samples[5,],
#   css.names          =c('CLAY_Norm' , 'SILT_Norm' , 'SAND_Norm'),
#   pch                = 21,
#   bg                 ="MAGENTA",
#   cex                = 1.2,
#   lwd                = 0.5
# )
#
#
# TT.points(
#   geo.ALLP,
#   tri.data           = Comparing.Samples[7,],
#   css.names          =c('CLAY_Norm' , 'SILT_Norm' , 'SAND_Norm'),
#   pch                = 21,
#   bg                 ="BLACK",
#   cex                = 1.2,
#   lwd                = 0.5
# )
#
#
# TT.points(
#   geo.ALLP,
#   tri.data           = Comparing.Samples[6,],
#   css.names          =c('CLAY_Norm' , 'SILT_Norm' , 'SAND_Norm'),
#   pch                = 21,
#   bg                 ="RED",
#   cex                = 1.2,
#   lwd                = 0.5
# )
#
#
dev.off()
legend("bottomright", legend = c('SRS-1709', '2011-119', '2012-103' ), pch=c( 22, 22, 22), pt.bg = c(rgb(0,0,0,0.8) , rgb(1,0,0,0.8), rgb(1,1,0,0.8) ), pt.lwd=3)
legend("topright", legend = c('SRS-1709', '2013-119', '2011-118' ), pch=c( 22, 22, 22), pt.bg = c(rgb(0,0,0,1) , rgb(0,1,0,1), rgb(0,0,1,1) ), pt.lwd=3)
tiff(filename="../Manuscript/Figures/ComparisonTexture.tiff", width=3840 , height=3840, pointsize = 80  )
TT.plot(
class.sys          ="USDA-NCSS.TT",
main               ="Sample selected for comparison",
tri.data           = Comparing.Samples[7,],
css.names          =c('CLAY_Norm' , 'SILT_Norm' , 'SAND_Norm'),
frame.bg.col       ="gray75",
pch                =16,
col                 ="Black",
cex                = 1.5,
lwd                = 1
)
TT.points(
geo.ALLP,
tri.data           = Comparing.Samples[5,],
css.names          =c('CLAY_Norm' , 'SILT_Norm' , 'SAND_Norm'),
pch                = 21,
bg                 ="GREEN",
cex                = 1.2,
lwd                = 0.5
)
TT.points(
geo.ALLP,
tri.data           = Comparing.Samples[2,],
css.names          =c('CLAY_Norm' , 'SILT_Norm' , 'SAND_Norm'),
pch                = 21,
bg                 ="BLUE",
cex                = 1.2,
lwd                = 0.5
)
# TT.points(
#   geo.ALLP,
#   tri.data           = Comparing.Samples[1,],
#   css.names          =c('CLAY_Norm' , 'SILT_Norm' , 'SAND_Norm'),
#   pch                = 21,
#   bg                 ="Yellow",
#   cex                = 1.2,
#   lwd                = 0.5
# )
#
#
# TT.points(
#   geo.ALLP,
#   tri.data           = Comparing.Samples[5,],
#   css.names          =c('CLAY_Norm' , 'SILT_Norm' , 'SAND_Norm'),
#   pch                = 21,
#   bg                 ="MAGENTA",
#   cex                = 1.2,
#   lwd                = 0.5
# )
#
#
# TT.points(
#   geo.ALLP,
#   tri.data           = Comparing.Samples[7,],
#   css.names          =c('CLAY_Norm' , 'SILT_Norm' , 'SAND_Norm'),
#   pch                = 21,
#   bg                 ="BLACK",
#   cex                = 1.2,
#   lwd                = 0.5
# )
#
#
# TT.points(
#   geo.ALLP,
#   tri.data           = Comparing.Samples[6,],
#   css.names          =c('CLAY_Norm' , 'SILT_Norm' , 'SAND_Norm'),
#   pch                = 21,
#   bg                 ="RED",
#   cex                = 1.2,
#   lwd                = 0.5
# )
#
#
legend("topright", legend = c('SRS-1709', '2013-119', '2011-118' ), pch=c( 22, 22, 22), pt.bg = c(rgb(0,0,0,1) , rgb(0,1,0,1), rgb(0,0,1,1) ), pt.lwd=3)
dev.off()
